searchState.loadedDescShard("ndarray_rand", 0, "Constructors for randomized arrays: <code>rand</code> integration for …\nA wrapper type that allows casting f64 distributions to f32\nConstructors for n-dimensional arrays with random elements.\nUsed as parameter in <code>sample_axis</code> and <code>sample_axis_using</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>rand</code>, re-exported for convenience and …\n<code>rand-distr</code>, re-exported for convenience and …\nCreate an array with shape <code>dim</code> with elements drawn from …\nCreate an array with shape <code>dim</code> with elements drawn from …\nSample <code>n_samples</code> lanes slicing along <code>axis</code> using the …\nSample <code>n_samples</code> lanes slicing along <code>axis</code> using the …\nCodes at or above this point can be used by users to …\nA marker trait used to indicate that an <code>RngCore</code> or …\nError type of random number generators\nTypes which may be filled with random data\nCodes below this point represent OS Errors (i.e. positive …\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nRetrieve the error code, if any.\nGenerating random samples from probability distributions\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nReference the inner error (<code>std</code> only)\nCalls <code>U::from(self)</code>.\nConstruct from any type supporting <code>std::error::Error</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nConvenience re-export of common members\nGenerates a random value using the thread-local random …\nExtract the raw OS error code (if this error came from the …\nRandom number generators and adapters\nSample a new value, using the given distribution.\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nSequence-related functionality\nUnwrap the inner error (<code>std</code> only)\nRetrieve the lazily-initialized thread-local random number …\nFill self with random data\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\nAll items in the provided weight collection are zero.\nSample a <code>u8</code>, uniformly distributed over ASCII letters and …\nThe Bernoulli distribution.\nError type returned from <code>Bernoulli::new</code>.\nAn iterator that generates random values of <code>T</code> with …\nA distribution of values of type <code>S</code> derived from the …\n<code>String</code> sampler\nTypes (distributions) that can be used to create a random …\n<code>p &lt; 0</code> or <code>p &gt; 1</code>.\nA weight is either less than zero, greater than the …\nThe provided weight collection contains no items.\nA distribution to sample floating point numbers uniformly …\nA distribution to sample floating point numbers uniformly …\nA distribution to sample items uniformly from a slice.\nA generic random value distribution, implemented for many …\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nSample values uniformly between two bounds.\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nAppend <code>len</code> random chars to <code>string</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a distribution of values of ‘S’ by mapping the …\nCreate a new <code>Slice</code> instance which samples uniformly from …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nCreate an iterator that generates random values of <code>T</code>, …\nGenerate a <code>String</code> of <code>len</code> random chars\nA distribution uniformly sampling numbers within a given …\nWeighted index sampling\nHelper trait similar to <code>Borrow</code> but implemented only for …\nRange that supports generating a single sample efficiently.\nHelper trait for creating objects using the correct …\nThe <code>UniformSampler</code> implementation supporting type <code>X</code>.\nSample values uniformly between two bounds.\nThe back-end implementing <code>UniformSampler</code> for <code>char</code>.\nThe back-end implementing <code>UniformSampler</code> for <code>Duration</code>.\nThe back-end implementing <code>UniformSampler</code> for …\nThe back-end implementing <code>UniformSampler</code> for integer types.\nHelper trait handling actual uniform sampling.\nThe type sampled by this implementation.\nImmutably borrows from an owned value. See <code>Borrow::borrow</code>\nCheck whether the range is empty.\nConstruct self, with inclusive lower bound and exclusive …\nConstruct self, with inclusive bounds <code>[low, high]</code>.\nSample a value.\nGenerate a sample from the given range.\nSample a single value uniformly from a range with …\nSample a single value uniformly from a range with …\nAll items in the provided weight collection are zero.\nA weight is either less than zero, greater than the …\nThe provided weight collection contains no items.\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA marker trait used to indicate that an <code>RngCore</code> or …\nTypes (distributions) that can be used to create a random …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn automatically-implemented extension trait on <code>RngCore</code> …\nThe core of a random number generator.\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nExtension trait on slices, providing random mutation and …\nA small-state, fast non-crypto PRNG\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nReturns a reference to one random element of the slice, or …\nChoose one element at random from the iterator.\nChooses <code>amount</code> elements from the slice at random, without …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects values at random from the iterator into a …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nChoose one element at random from the iterator.\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from another <code>Rng</code>.\nCreate a new PRNG using the given seed.\nReturn a random value supporting the <code>Standard</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nCreate a distribution of values of ‘S’ by mapping the …\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nShuffle a slice in place, but exit early.\nGenerates a random value using the thread-local random …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nSample a new value, using the given distribution.\nCreate an iterator that generates random values of <code>T</code>, …\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nShuffle a mutable slice in place.\nRetrieve the lazily-initialized thread-local random number …\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> entirely with random data.\nA random number generator that retrieves randomness from …\nA small-state, fast non-crypto PRNG\nThe standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …\nA reference to the thread-local generator\nWrappers / adapters forming RNGs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMock random number generator\n<code>ReadRng</code> error type\nAn RNG that reads random bytes straight from any type …\nA wrapper around any PRNG that implements <code>BlockRngCore</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ReadRng</code> from a <code>Read</code>.\nCreate a new <code>ReseedingRng</code> from an existing PRNG, combined …\nReseed the internal PRNG.\nA simple implementation of <code>RngCore</code> for testing purposes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>StepRng</code>, yielding an arithmetic sequence starting …\nThe element type.\nExtension trait on iterators, providing random sampling …\nAn iterator over multiple slice elements.\nExtension trait on slices, providing random mutation and …\nReturns a reference to one random element of the slice, or …\nChoose one element at random from the iterator.\nChooses <code>amount</code> elements from the slice at random, without …\nCollects <code>amount</code> values at random from the iterator into a …\nCollects values at random from the iterator into a …\nSimilar to <code>choose_multiple</code>, but where the likelihood of …\nReturns a mutable reference to one random element of the …\nChoose one element at random from the iterator.\nSimilar to <code>choose</code>, but where the likelihood of each …\nSimilar to <code>choose_mut</code>, but where the likelihood of each …\nReturns the argument unchanged.\nLow-level API for sampling indices\nCalls <code>U::from(self)</code>.\nShuffle a slice in place, but exit early.\nShuffle a mutable slice in place.\nA vector of indices.\nReturn type of <code>IndexVec::into_iter</code>.\nReturn type of <code>IndexVec::iter</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the value at the given <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into an iterator over the indices as a sequence of …\nReturn result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …\nReturns <code>true</code> if the length is 0.\nIterate over the indices as a sequence of <code>usize</code> values\nReturns the number of indices\nRandomly sample exactly <code>amount</code> distinct indices from …\nRandomly sample exactly <code>amount</code> distinct indices from …\n<code>a &lt;= 1</code> or <code>nan</code>.\n<code>|beta| &gt;= alpha</code> or <code>nan</code>.\nAll items in the provided weight collection are zero.\n<code>alpha &lt;= 0</code> or <code>nan</code>.\n<code>alpha.len() &lt; 2</code>.\n<code>alpha &lt;= 0.0</code> or <code>nan</code>.\n<code>alpha &lt;= 0</code> or <code>nan</code>.\nSample a <code>u8</code>, uniformly distributed over ASCII letters and …\nThe shape parameter is not finite.\nThe standard deviation or other dispersion parameter is …\nThe Bernoulli distribution.\nError type returned from <code>Bernoulli::new</code>.\nThe Beta distribution with shape parameters <code>alpha</code> and <code>beta</code>.\nError type returned from <code>Beta::new</code>.\n<code>beta &lt;= 0</code> or <code>nan</code>.\nThe binomial distribution <code>Binomial(n, p)</code>.\nError type returned from <code>Binomial::new</code>.\nThe Cauchy distribution <code>Cauchy(median, scale)</code>.\nError type returned from <code>Cauchy::new</code>.\nThe chi-squared distribution <code>χ²(k)</code>, where <code>k</code> is the …\nError type returned from <code>ChiSquared::new</code> and <code>StudentT::new</code>.\nThe Dirichlet distribution <code>Dirichlet(alpha)</code>.\nError type returned from <code>Dirchlet::new</code>.\nAn iterator that generates random values of <code>T</code> with …\nTypes (distributions) that can be used to create a random …\n<code>0.5 * k &lt;= 0</code> or <code>nan</code>.\nThe exponential distribution <code>Exp(lambda)</code>.\nSamples floating-point numbers according to the …\nError type returned from <code>Exp::new</code>.\nThe Fisher F distribution <code>F(m, n)</code>.\nError type returned from <code>FisherF::new</code>.\nSamples floating-point numbers according to the Fréchet …\nError type returned from <code>Frechet::new</code>.\nThe Gamma distribution <code>Gamma(shape, scale)</code> distribution.\nError type returned from <code>Gamma::new</code>.\nError type returned from <code>Geometric::new</code>.\nThe geometric distribution <code>Geometric(p)</code> bounded to …\nSamples floating-point numbers according to the Gumbel …\nError type returned from <code>Gumbel::new</code>.\nError type returned from <code>Hypergeometric::new</code>.\nThe hypergeometric distribution <code>Hypergeometric(N, K, n)</code>.\n<code>p &lt; 0</code> or <code>p &gt; 1</code>.\n<code>p &lt; 0 || p &gt; 1</code> or <code>nan</code>\nA weight is either less than zero, greater than the …\nThe inverse Gaussian distribution\nError type returned from <code>InverseGaussian::new</code>\n<code>lambda &lt; 0</code> or <code>nan</code>.\nlocation is infinite or NaN\nlocation is infinite or NaN\nThe log-normal distribution <code>ln N(mean, std_dev**2)</code>.\n<code>m &lt;= 0</code> or <code>nan</code>.\n<code>mean &lt;= 0</code> or <code>nan</code>.\nThe mean value is too small (log-normal samples must be …\n<code>mode &lt; min</code> or <code>mode &gt; max</code> or <code>mode</code> is NaN.\n<code>mode &lt; min</code> or <code>mode &gt; max</code> or <code>mode</code> is NaN.\n<code>n &lt;= 0</code> or <code>nan</code>.\n<code>n &lt; 1</code>.\nThe provided weight collection contains no items.\nThe normal distribution <code>N(mean, std_dev**2)</code>.\nError type returned from <code>Normal::new</code> and <code>LogNormal::new</code>.\nThe normal-inverse Gaussian distribution\nError type returned from <code>NormalInverseGaussian::new</code>\nA distribution to sample floating point numbers uniformly …\nA distribution to sample floating point numbers uniformly …\nSamples floating-point numbers according to the Pareto …\nError type returned from <code>Pareto::new</code>.\nThe PERT distribution.\nError type returned from <code>Pert</code> constructors.\nThe Poisson distribution <code>Poisson(lambda)</code>.\nError type returned from <code>Poisson::new</code>.\n<code>total_population_size</code> is too large, causing floating point …\n<code>p &gt; 1</code>.\n<code>population_with_feature &gt; total_population_size</code>.\n<code>p &lt; 0</code> or <code>nan</code>.\n<code>max &lt; min</code> or <code>min</code> or <code>max</code> is NaN.\n<code>max &lt; min</code> or <code>min</code> or <code>max</code> is NaN.\n<code>s &lt; 0</code> or <code>nan</code>.\n<code>sample_size &gt; total_population_size</code>.\nscale is not finite positive number\nscale is not finite positive number\n<code>1 / scale == 0</code>.\n<code>scale &lt;= 0</code> or <code>nan</code>.\n<code>scale &lt;= 0</code> or <code>nan</code>.\n<code>scale &lt;= 0</code> or <code>nan</code>.\nThe scale parameter is not finite or it is less or equal …\n<code>scale &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt;= 0</code> or <code>nan</code>.\nshape is not finite positive number\n<code>shape &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt; 0</code> or <code>shape</code> is NaN\n<code>lambda &lt;= 0</code> or <code>nan</code>.\n<code>shape &lt;= 0</code> or <code>nan</code>.\n<code>size &lt; 2</code>.\nThe skew normal distribution <code>SN(location, scale, shape)</code>.\nError type returned from <code>SkewNormal::new</code>.\nA generic random value distribution, implemented for many …\nSamples integers according to the geometric distribution …\nSamples floating-point numbers according to the normal …\nThe Student t distribution, <code>t(nu)</code>, where <code>nu</code> is the degrees …\nToo many weights are provided (length greater than <code>u32::MAX</code>…\nThe triangular distribution.\nError type returned from <code>Triangular::new</code>.\nSample values uniformly between two bounds.\nSamples uniformly from the unit ball (surface and …\nSamples uniformly from the edge of the unit circle in two …\nSamples uniformly from the unit disc in two dimensions.\nSamples uniformly from the surface of the unit sphere in …\nSamples floating-point numbers according to the Weibull …\nError type returned from <code>Weibull::new</code>.\nA distribution using weighted sampling to pick a …\nError type returned from <code>WeightedIndex::new</code>.\nA distribution using weighted sampling of discrete items\nSamples integers according to the zeta distribution.\nError type returned from <code>Zeta::new</code>.\nSamples integers according to the Zipf distribution.\nError type returned from <code>Zipf::new</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct, from mean and coefficient of variation\nConstruct, from (linear-space) mean and coefficient of …\nConstruct a new <code>Bernoulli</code> with the probability of success …\nSample from a z-score\nSample from a z-score\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the location of the distribution.\nCreate a distribution of values of ‘S’ by mapping the …\nReturns the mean (<code>μ</code>) of the distribution.\nCreates a new <code>WeightedAliasIndex</code>.\nConstruct a new <code>Binomial</code> with the given shape parameters <code>n</code> …\nConstruct a new <code>Cauchy</code> with the given shape parameters …\nConstruct a new <code>Dirichlet</code> with the given alpha parameter …\nConstruct a new <code>Exp</code> with the given shape parameter <code>lambda</code>.\nConstruct a new <code>Bernoulli</code> with the given probability of …\nConstruct a new <code>Frechet</code> distribution with given <code>location</code>, …\nConstruct an object representing the <code>Gamma(shape, scale)</code> …\nCreate a new chi-squared distribution with …\nCreate a new <code>FisherF</code> distribution, with the given …\nCreate a new Student t distribution with <code>n</code> degrees of …\nConstruct an object representing the <code>Beta(alpha, beta)</code> …\nConstruct a new <code>Geometric</code> with the given shape parameter <code>p</code> …\nConstruct a new <code>Gumbel</code> distribution with given <code>location</code> …\nConstructs a new <code>Hypergeometric</code> with the shape parameters …\nConstruct a new <code>InverseGaussian</code> distribution with the …\nConstruct, from mean and standard deviation\nConstruct, from (log-space) mean and standard deviation\nConstruct a new <code>NormalInverseGaussian</code> distribution with …\nConstruct a new Pareto distribution with given <code>scale</code> and …\nSet up the PERT distribution with defined <code>min</code>, <code>max</code> and <code>mode</code>…\nCreates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values\nConstruct a new <code>Poisson</code> with the given shape parameter …\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nConstruct, from location, scale and shape.\nSet up the Triangular distribution with defined <code>min</code>, <code>max</code> …\nConstruct a new <code>Weibull</code> distribution with given <code>scale</code> and …\nConstruct a new <code>Zeta</code> distribution with given <code>a</code> parameter.\nConstruct a new <code>Zipf</code> distribution for a set with <code>n</code> …\nCreate a new <code>Uniform</code> instance which samples uniformly from …\nSet up the PERT distribution with defined <code>min</code>, <code>max</code>, <code>mode</code> …\nConstruct a new <code>Dirichlet</code> with the given shape parameter …\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nCreate an iterator that generates random values of <code>T</code>, …\nReturns the scale of the distribution.\nReturns the shape of the distribution.\nReturns the standard deviation (<code>σ</code>) of the distribution.\nA distribution uniformly sampling numbers within a given …\nUpdate a subset of weights, without changing the number of …\nThis module contains an implementation of alias method for …\nA generic interface for casting between machine scalars …\nNumbers which have upper and lower bounds\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nA generic trait for converting a number to a value.\nUnary operator for retrieving the multiplicative inverse, …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe base trait for numeric types, covering <code>0</code> and <code>1</code> values, …\nThe trait for <code>Num</code> types which also implement assignment …\nGeneric trait for types implementing numeric assignment …\nThe trait for <code>NumAssign</code> types which also implement …\nAn interface for casting between machine scalars.\nGeneric trait for types implementing basic numeric …\nThe trait for <code>Num</code> types which also implement numeric …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe result after applying the operator.\nThe resulting type after applying the fused multiply-add.\nThe result after applying the operator.\nReturn Archimedes’ constant <code>π</code>.\nBinary operator for raising a value to a power.\nGeneric trait for primitive integers.\nThe trait for <code>Num</code> references which implement numeric …\nReturn <code>sqrt(2.0)</code>.\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nUseful functions for signed numbers (i.e. numbers that can …\nReturn the full circle constant <code>τ</code>.\nA generic trait for converting a value to a number.\nA trait for values which cannot be negative\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nComputes the absolute value.\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nConvert a value to another, using the <code>as</code> operator.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nCast from one machine scalar to another.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nPerforms euclid division that returns <code>None</code> instead of …\nReturns both the quotient and remainder from checked …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nRaises a value to the power of exp, returning <code>None</code> if an …\nFinds the remainder of dividing two numbers, checking for …\nFinds the euclid remainder of dividing two numbers, …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nA value bounded by a maximum value\nA value bounded by a minimum value\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCreates a number from another value that can be converted …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an integer from big endian to the target’s …\nCreate a number from its representation as a byte array in …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConvert an integer from little endian to the target’s …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nConvert from a string and radix (typically <code>2..=36</code>).\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nCalculate the length of the hypotenuse of a right-angle …\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the multiplicative inverse of <code>self</code>.\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns true if the number is negative and false if the …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns true if the number is positive and false if the …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite number this type can represent\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite number this type can represent\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nReturns the <code>NaN</code> value.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nRaises a value to the power of exp, using exponentiation …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReturns <code>self</code> to the power <code>rhs</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the nearest integer to a number. Round half-way …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReturns the sign of the number.\nReturns a number that represents the sign of <code>self</code>.\nReturns the sign of the number.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nReverses the byte order of the integer.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConvert <code>self</code> to big endian from the target’s endianness.\nReturn the memory representation of this number as a byte …\nConverts radians to degrees.\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConvert <code>self</code> to little endian from the target’s …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nConverts degrees to radians.\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturn the integer part of a number.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nNumbers which have upper and lower bounds\nNumbers which have lower bounds\nNumbers which have upper bounds\nReturns the largest finite number this type can represent\nReturns the largest finite number this type can represent\nReturns the smallest finite number this type can represent\nReturns the smallest finite number this type can represent\nA generic interface for casting between machine scalars …\nA generic trait for converting a number to a value.\nAn interface for casting between machine scalars.\nA generic trait for converting a value to a number.\nConvert a value to another, using the <code>as</code> operator.\nCast from one machine scalar to another.\nCreates a number from another value that can be converted …\nConverts a <code>f32</code> to return an optional value of this type. …\nConverts a <code>f64</code> to return an optional value of this type. …\nConverts an <code>i128</code> to return an optional value of this type. …\nConverts an <code>i16</code> to return an optional value of this type. …\nConverts an <code>i32</code> to return an optional value of this type. …\nConverts an <code>i64</code> to return an optional value of this type. …\nConverts an <code>i8</code> to return an optional value of this type. …\nConverts an <code>isize</code> to return an optional value of this …\nConverts an <code>u128</code> to return an optional value of this type. …\nConverts an <code>u16</code> to return an optional value of this type. …\nConverts an <code>u32</code> to return an optional value of this type. …\nConverts an <code>u64</code> to return an optional value of this type. …\nConverts an <code>u8</code> to return an optional value of this type. …\nConverts a <code>usize</code> to return an optional value of this type. …\nConverts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …\nConverts the value of <code>self</code> to an <code>i128</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i16</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i32</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i64</code>. If the value cannot …\nConverts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nConverts the value of <code>self</code> to an <code>isize</code>. If the value …\nConverts the value of <code>self</code> to a <code>u128</code>. If the value cannot …\nConverts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nConverts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …\nConverts the value of <code>self</code> to a <code>usize</code>. If the value cannot …\nReturn Euler’s number.\nReturn <code>1.0 / π</code>.\nReturn <code>1.0 / sqrt(2.0)</code>.\nReturn <code>2.0 / π</code>.\nReturn <code>2.0 / sqrt(π)</code>.\nReturn <code>π / 2.0</code>.\nReturn <code>π / 3.0</code>.\nReturn <code>π / 4.0</code>.\nReturn <code>π / 6.0</code>.\nReturn <code>π / 8.0</code>.\nGeneric trait for floating point numbers\nGeneric trait for floating point numbers that works with …\nReturn <code>ln(10.0)</code>.\nReturn <code>ln(2.0)</code>.\nReturn <code>log10(2.0)</code>.\nReturn <code>log10(e)</code>.\nReturn <code>log2(10.0)</code>.\nReturn <code>log2(e)</code>.\nReturn Archimedes’ constant <code>π</code>.\nReturn <code>sqrt(2.0)</code>.\nReturn the full circle constant <code>τ</code>.\nTrait for floating point numbers that provide an …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nComputes the absolute value of <code>self</code>. Returns …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nReturns the smallest integer greater than or equal to a …\nA value bounded by a minimum and a maximum\nClamps a value between a min and max.\nReturns the floating point category of the number. If only …\nReturns the floating point category of the number. If only …\nReturns a number composed of the magnitude of <code>self</code> and the …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns positive infinity.\nReturns the infinite value.\nReturns the mantissa, base 2 exponent, and sign as …\nReturns the mantissa, base 2 exponent, and sign as …\nReturns <code>true</code> if this number is neither infinite nor <code>NaN</code>.\nReturns <code>true</code> if the number is neither infinite or NaN.\nReturns <code>true</code> if this value is positive infinity or …\nReturns <code>true</code> if the number is infinite.\nReturns <code>true</code> if this value is <code>NaN</code> and false otherwise.\nReturns <code>true</code> if the number is NaN.\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if the number is neither zero, infinite, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …\nReturns <code>true</code> if the number is subnormal.\nReturns <code>true</code> if the number is subnormal.\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nReturns NaN.\nReturns the <code>NaN</code> value.\nReturns negative infinity.\nReturns the negative infinite value.\nReturns <code>-0.0</code>.\nReturns <code>-0.0</code>.\nRaise a number to a floating point power.\nRaise a number to an integer power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the reciprocal (multiplicative inverse) of the …\nReturns the nearest integer to a number. Round half-way …\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts to degrees, assuming the number is in radians.\nConverts radians to degrees.\nConverts to radians, assuming the number is in degrees.\nConverts degrees to radians.\nReturn the ordering between <code>self</code> and <code>other</code>.\nReturn the integer part of a number.\nReturn the integer part of a number.\nDefines an associated constant representing the …\nDefines an associated constant representing the additive …\nThe multiplicative identity element of <code>Self</code>, <code>1</code>.\nDefines a multiplicative identity element for <code>Self</code>.\nThe additive identity element of <code>Self</code>, <code>0</code>.\nDefines an additive identity element for <code>Self</code>.\nReturns <code>true</code> if <code>self</code> is equal to the multiplicative …\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns the multiplicative identity, <code>1</code>.\nReturns the multiplicative identity element of <code>Self</code>, <code>1</code>.\nSets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the additive identity, <code>0</code>.\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nGeneric trait for primitive integers.\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nConvert an integer from big endian to the target’s …\nConvert an integer from little endian to the target’s …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nRaises self to the power of <code>exp</code>, using exponentiation by …\nReverses the order of bits in the integer.\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nReverses the byte order of the integer.\nConvert <code>self</code> to big endian from the target’s endianness.\nConvert <code>self</code> to little endian from the target’s …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nShifts the bits to the left by a specified amount, <code>n</code>, …\nShifts the bits to the right by a specified amount, <code>n</code>, …\nCreate a number from its representation as a byte array in …\nCreate a number from its representation as a byte array in …\nCreate a number from its memory representation as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nReturn the memory representation of this number as a byte …\nPerforms addition that returns <code>None</code> instead of wrapping …\nPerforms division that returns <code>None</code> instead of panicking …\nPerforms multiplication that returns <code>None</code> instead of …\nPerforms negation that returns <code>None</code> if the result can’t …\nPerforms an integral remainder that returns <code>None</code> instead …\nPerforms a left shift that returns <code>None</code> on shifts larger …\nPerforms a right shift that returns <code>None</code> on shifts larger …\nPerforms subtraction that returns <code>None</code> instead of wrapping …\nAdds two numbers, checking for overflow. If overflow …\nDivides two numbers, checking for underflow, overflow and …\nMultiplies two numbers, checking for underflow or …\nNegates a number, returning <code>None</code> for results that can’t …\nFinds the remainder of dividing two numbers, checking for …\nChecked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …\nChecked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …\nSubtracts two numbers, checking for underflow. If …\nPerforms euclid division that returns <code>None</code> instead of …\nReturns both the quotient and remainder from checked …\nFinds the euclid remainder of dividing two numbers, …\nCalculates Euclidean division, the matching method for …\nReturns both the quotient and remainder from Euclidean …\nCalculates the least nonnegative remainder of <code>self (mod v)</code>.\nUnary operator for retrieving the multiplicative inverse, …\nThe result after applying the operator.\nReturns the multiplicative inverse of <code>self</code>.\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nThe fused multiply-add assignment operation …\nThe resulting type after applying the fused multiply-add.\nPerforms the fused multiply-add operation <code>(self * a) + b</code>\nPerforms the fused multiply-add assignment operation …\nPerforms addition with a flag for overflow.\nPerforms multiplication with a flag for overflow.\nPerforms substraction with a flag for overflow.\nReturns a tuple of the sum along with a boolean indicating …\nReturns a tuple of the product along with a boolean …\nReturns a tuple of the difference along with a boolean …\nSaturating math operations. Deprecated, use <code>SaturatingAdd</code>, …\nPerforms addition that saturates at the numeric bounds …\nPerforms multiplication that saturates at the numeric …\nPerforms subtraction that saturates at the numeric bounds …\nSaturating addition operator. Returns a+b, saturating at …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction operator. Returns a-b, saturating …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nPerforms addition that wraps around on overflow.\nPerforms multiplication that wraps around on overflow.\nPerforms a negation that does not panic.\nPerforms a left shift that does not panic.\nPerforms a right shift that does not panic.\nPerforms subtraction that wraps around on overflow.\nWrapping (modular) addition. Computes <code>self + other</code>, …\nWrapping (modular) multiplication. Computes <code>self * other</code>, …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nPanic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …\nPanic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …\nWrapping (modular) subtraction. Computes <code>self - other</code>, …\nThe result after applying the operator.\nBinary operator for raising a value to a power.\nRaises a value to the power of exp, returning <code>None</code> if an …\nRaises a value to the power of exp, using exponentiation …\nReturns <code>self</code> to the power <code>rhs</code>.\nA trait for real number types that do not necessarily have …\nComputes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …\nThe positive difference of two numbers.\nComputes the arccosine of a number. Return value is in …\nInverse hyperbolic cosine function.\nComputes the arcsine of a number. Return value is in …\nInverse hyperbolic sine function.\nComputes the arctangent of a number. Return value is in …\nComputes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…\nInverse hyperbolic tangent function.\nTake the cubic root of a number.\nReturns the smallest integer greater than or equal to a …\nComputes the cosine of a number (in radians).\nHyperbolic cosine function.\nReturns epsilon, a small positive value.\nReturns <code>e^(self)</code>, (the exponential function).\nReturns <code>2^(self)</code>.\nReturns <code>e^(self) - 1</code> in a way that is accurate even if the …\nReturns the largest integer less than or equal to a number.\nReturns the fractional part of a number.\nCalculate the length of the hypotenuse of a right-angle …\nReturns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …\nReturns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …\nReturns the natural logarithm of the number.\nReturns <code>ln(1+n)</code> (natural logarithm) more accurately than if\nReturns the logarithm of the number with respect to an …\nReturns the base 10 logarithm of the number.\nReturns the base 2 logarithm of the number.\nReturns the maximum of the two numbers.\nReturns the largest finite value that this type can …\nReturns the minimum of the two numbers.\nReturns the smallest positive, normalized value that this …\nReturns the smallest finite value that this type can …\nFused multiply-add. Computes <code>(self * a) + b</code> with only one …\nRaise a number to a real number power.\nRaise a number to an integer power.\nTake the reciprocal (inverse) of a number, <code>1/x</code>.\nReturns the nearest integer to a number. Round half-way …\nReturns a number that represents the sign of <code>self</code>.\nComputes the sine of a number (in radians).\nSimultaneously computes the sine and cosine of the number, …\nHyperbolic sine function.\nTake the square root of a number.\nComputes the tangent of a number (in radians).\nHyperbolic tangent function.\nConverts radians to degrees.\nConverts degrees to radians.\nReturn the integer part of a number.\nUseful functions for signed numbers (i.e. numbers that can …\nA trait for values which cannot be negative\nComputes the absolute value.\nComputes the absolute value.\nThe positive difference of two numbers.\nThe positive difference of two numbers.\nReturns true if the number is negative and false if the …\nReturns true if the number is positive and false if the …\nReturns the sign of the number.\nReturns the sign of the number.\nHelper trait similar to <code>Borrow</code> but implemented only for …\nRange that supports generating a single sample efficiently.\nHelper trait for creating objects using the correct …\nThe <code>UniformSampler</code> implementation supporting type <code>X</code>.\nSample values uniformly between two bounds.\nThe back-end implementing <code>UniformSampler</code> for <code>char</code>.\nThe back-end implementing <code>UniformSampler</code> for <code>Duration</code>.\nThe back-end implementing <code>UniformSampler</code> for …\nThe back-end implementing <code>UniformSampler</code> for integer types.\nHelper trait handling actual uniform sampling.\nThe type sampled by this implementation.\nImmutably borrows from an owned value. See <code>Borrow::borrow</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the range is empty.\nConstruct self, with inclusive lower bound and exclusive …\nConstruct self, with inclusive bounds <code>[low, high]</code>.\nSample a value.\nGenerate a sample from the given range.\nSample a single value uniformly from a range with …\nSample a single value uniformly from a range with …\nTrait that must be implemented for weights, that are used …\nMaximum number representable by <code>Self</code>.\nA distribution using weighted sampling to pick a …\nElement of <code>Self</code> equivalent to 0.\nSums all values in slice <code>values</code>.\nProduce an instance of <code>Self</code> from a <code>u32</code> value, or return …")