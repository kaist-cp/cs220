searchState.loadedDescShard("cs220", 0, "KAIST CS220: Programming Principles\nKAIST CS220 Assignments.\nAssignment 1: Preparing Rust Development Environment.\nAssignment 2: Mastering common programming concepts (1/2).\nAssignment 3: Mastering common programming concepts (2/2)\nAssignment 4: Designing a calculator.\nAssignment 6: Mastering advanced types (1/2).\nAssignment 7: Mastering advanced types (2/2).\nAssignment 8: First-class functions.\nAssignment 9: Iterators (1/2).\nAssignment 10: Iterators (2/2). The primary goal of this …\nAssignment 11: Familiarizing with smart pointers.\nAssignment 12: Concurrency.\nAssignment 13: Parallelism.\nAssignment 1: Preparing Rust Development Environment. …\nAdds two unsigned words. If overflow happens, just wrap …\nSubtracts two unsigned words. If overflow happens, just …\nSmall problems.\nVector and matrices.\nCapitalizes English alphabets (leaving the other …\nReturns the array of nC0, nC1, nC2, …, nCn, where nCk = …\nConverts Fahrenheit to Celsius temperature degree.\nReturns the greatest common divisor (GCD) of two …\nReturns the sum of the given array. (We assume the absence …\nGiven a non-negative integer, say <code>n</code>, return the smallest …\nReturns the “zip” of two vectors.\n2x2 floating-point matrix of the following configuration:\nrow 1, column 1\nrow 1, column 2\nrow 2, column 1\nrow 2, column 2\nCalculates the Fibonacci number. (We assume the absence of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the inverse of the given matrix. (We assume the …\nYou will implement a number of custom operators.\nParsing a shell command.\nSmall problems.\nNo value.\nCustom option type.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>MyNone</code> if the option is <code>MyNone</code>, otherwise calls <code>f</code> …\nMaps an <code>MyOption&lt;T&gt;</code> to <code>MyOption&lt;U&gt;</code> by applying a function …\nCustom operator: <code>option_op_or(v1, v2, f)</code>. If neither <code>v1</code> …\nParse the string as a shell command.\nThe last character is removed.\nThe whole string is copied to the clipboard.\nDay of week.\nFriday.\nMonday.\nThe string in the clipboard is appended.\nSaturday.\nSunday.\nThursday.\nTuesday.\nA character is typed.\nEvents in a text editor.\nWednesday.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a list of integers, returns its median (when sorted, …\nGiven a list of integers, returns its smallest mode (the …\nThe next day of week.\nConverts HR commands to the organization table.\nConverts the given string to Pig Latin. Use the rules …\nStarting from an empty string and an empty clipboard, …\nCalculator.\nParser.\nSyntax.\nCalculator’s context.\nCalculates the given command. (We assume the absence of …\nCalculates the given expression. (We assume the absence of …\nReturns the current anonymous variable counter.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new context.\nParses command.\nAdd.\nBinary operators.\nBinary operation.\nCommand of the form “{expression}” or “{var} = …\nDivide.\nExpression.\nMultiply.\nNumber.\nPower.\nSubtract.\nVariable.\nExpression (rhs).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVariable (lhs).\nLhs.\nOperator.\nRhs.\nSemiring\nSymbolic differentiation with rational coefficents.\nPolynomials with coefficient in <code>C</code>.\nSemiring.\nAddition operation.\nEvaluates the polynomial with the given value.\nReturns the argument unchanged.\nConverts integer to semiring value.\nCalls <code>U::from(self)</code>.\nMultiplication operation.\nMultiplicative identity.\nConstructs polynomial <code>ax^n</code>.\nConstructs polynomial <code>x</code>.\nAdditive identity.\nAddition\nBasic functions\nComposition\nComplex functions.\nConstant polynomial.\nConstant\nCosine function.\nDifferentiable functions.\nDivision\nEvaluate functions.\nExpoential function.(<code>e^x</code>)\nExponential\nBasic functions\nMinus one\nMultipliciation\nOne\nPolynomial\nNon-const polynomial.\nRational number represented by two isize, numerator and …\nSine function.\nSingleton polynomial.\nSubtraction\nTrignometirc\nTrigonometric functions.\nZero\nDifferentiate.\nHINT: Consult …\nHINT: Consult https://en.wikipedia.org/wiki/Power_rule\nHINT: Consult …\nHINT: Consult …\nHINT: Consult …\nEvaluate <code>self</code> at <code>x</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new rational number.\nCreates a new exponential function.\nCreates a new const polynomial.\nCreates a new cosine function.\nCreates a new polynomial.\nCreates a new sine function.\nCoefficent of polynomial. Must be non-zero.\nPower of polynomial. Must be non-zero.\nCoefficent\nCoefficent\nGenerators\nImplement your own minimal <code>itertools</code> crate.\nImplement functions using <code>Iterator</code> trait\nTranformer\nGenerator\nReturns a generator that yields collatz numbers.\nReturns a generator that yields fibonacci numbers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterator that chains two iterators together.\nIterator that iterates over given iterator and enumerates …\nMy Itertools trait.\nIterator that iterates over the given iterator and returns …\nIterator that zips two iterators together.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that chains <code>self</code> and <code>other</code> together.\nReturns an iterator that iterates over <code>self</code> and enumerates …\nFoldleft for <code>MyIterTools</code>\nReturns an iterator that iterates over the <code>self</code> and …\nReturns an iterator that zips <code>self</code> and <code>other</code> together.\nEndpoint of range, inclusive or exclusive.\nExclusive endpoint\nInclusive endpoint\nReturns an iterator over the divisors of n.\nReturns and iterator over the generic fibonacci sequence …\nReturns an iterator over substring query indexes in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the range [left, right) with the …\nCustom transformation.\nIdentity transformation.\nRepeats transformation for <code>n</code> times.\nRepeats transformation until converges.\nRepresents transformation of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new repeat transformation.\nCreates a new repeat transformation.\nTransforms value.\nChurch Numerals\nAssignment 08: First-class functions.\nChurch numerals are represented as higher-order functions …\nImplement a function to add two Church numerals.\nImplement a function to raise one Church numeral to the …\nImplement a function to convert a usize type to a Church …\nImplement a function to multiply (mult) two Church …\nThis function returns a Church numeral equivalent of the …\nImplement a function to add 1 to a given Church numeral.\nImplement a function to convert a Church numeral to a …\nThis function returns a Church numeral equivalent of the …\nThis function represents the Church numeral for zero. As …\nCase 1.\nCase 2.\nEither <code>T1</code>, or <code>T2</code>.\nCount Repeat\nReturns the argument unchanged.\nFunny Map\nCalls <code>U::from(self)</code>.\nMaps the inner value.\nRepeat\nThe inner value.\nThe inner value.\nBig integer with infinite precision.\nSimple matrix multiplication\nSmall exercises.\nAn signed integer with infinite precision implemented with …\nThe carrier for <code>BigInt</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BigInt</code> from a <code>usize</code>.\nCreates a new <code>BigInt</code> from a <code>Vec&lt;u32&gt;</code>.\ndot product of two arrays\nMatrix multiplication\nelementwise vector addition\nReturns mean for each class.\nReturns a new vector that contains the item that appears <code>n</code> …\nAlternate elements from three iterators until they have …\nAlternate elements from array of n iterators until they …\nReturns whether the given sequence is a fibonacci sequence …\nReturns whether the given string is palindrome or not.\nReturns mean of k smallest value’s mean.\nReturn the position of the median element in the vector.\nReturns the sum of <code>f(v)</code> for all element <code>v</code> the given array.\nAmong the cartesian product of input vectors, return the …\nReturns the sum of all elements in a two-dimensional array.\nLabyrinth\nSmall exercises.\nHusband\nStrategy of husband\nBased on the information about currently visited room …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat might a husband, who is looking for his wife’s ID …\nData\nDirectory\nFile\nLeaf node\nRepresents a node of tree data structure.\nNon-leaf node\nGiven a file, summarize all subfiles and sizes in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the pairs of <code>(i, j)</code> where <code>i &lt; j</code> and …\nReturns the natural join of two tables using the first …\nGenerates sequence of unique primitive Pythagorean triples,\nRemove all duplicate occurences of a number inside the …\nRemove all even numbers inside a vector using the given …\nTraverses the tree in preorder.\nA small graph library.\nSingly linked list.\nMock storage.\nTV Room Simulator.\nError type for graph operations.\nHandle to a graph node.\nSubgraph\nAdds an edge to <code>to</code>. If the modification cannot be done, …\nAdds a node to the subgraph. Returns true iff the node is …\nRemoves all edges. If the modification cannot be done, …\nReturns true iff the subgraph contains a cycle. Nodes that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a node and returns the handle to it.\nCreates a new subgraph.\nRemoves the edge to <code>to</code>. If the modification cannot be …\nRemoves a node from the subgraph. Returns true iff the …\nNode of the list.\nA singly-linked list.\nFlatten the list of lists into a single list.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new list from the given vector <code>vec</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the current list into a vector.\nReturn the length (i.e., number of nodes) of the list.\nApply function <code>f</code> on every element of the list.\nCreates a new node.\nCreates a new list.\nPointer to the next node. If it is <code>None</code>, there is no next …\nApply given function <code>f</code> for each adjacent pair of elements …\nRemoves and returns the node at the back of the list.\nRemoves and returns the node at the front of the list.\nAdds the given node to the back of the list.\nAdds the given node to the front of the list.\nValue of current node.\nFile uploader.\nMock storage.\nTrait for storage object.\nStorage usage analyzer.\nReturns the capacity of the storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the usage of the internal storage is under …\nCreates a new mock storage.\nCreates a new file uploader with given internal storage.\nCreates a new usage analyzer.\nUploads a file. If a file with the same name already …\nUploads a file to the internal storage.\nReturns the used memory size of the storage.\nTV Room Guest.\nTV Room Manager.\nTV Room\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the TV room is opened or not.\nCreates a new TV room.\nAdds new guest to the TV room.\nOpens the TV room and returns the manager.\nFlipping card game.\nDemultiplexing sender\nFunnel\nSmall exercises\nblue\nColor represents the color of the card. The color of a …\nPlayer struct represents a player in the card game. Each …\nwhite\nThis function should return the index of the card to flip …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new player with an empty memory.\nSender for demux.\nDemux.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nsend\nSpawn a thread that concurrently receive datas from <code>rxs</code>, …\nThe “pong” function\nExecutes the given functions (f1, f2) in concurrent and …\nAssignment 13: Parallelism.\nParallel dot product of two arrays\nAlternate elements from three iterators until they have …\nParallel Matrix multiplication\nReturns the sum of <code>f(v)</code> for all element <code>v</code> the given array.\nParallel vector addition")