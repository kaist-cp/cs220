(function() {var type_impls = {
"ndarray":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/constructors.rs.html#19-113\">source</a><a href=\"#impl-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, D&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, A, D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Methods for read-only array views.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_shape\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/constructors.rs.html#48-54\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/type.ArrayView.html#tymethod.from_shape\" class=\"fn\">from_shape</a>&lt;Sh&gt;(shape: Sh, xs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"ndarray/struct.ShapeError.html\" title=\"struct ndarray::ShapeError\">ShapeError</a>&gt;<div class=\"where\">where\n    Sh: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"ndarray/struct.StrideShape.html\" title=\"struct ndarray::StrideShape\">StrideShape</a>&lt;D&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a read-only array view borrowing its data from a slice.</p>\n<p>Checks whether <code>shape</code> are compatible with the slice’s\nlength, returning an <code>Err</code> if not compatible.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::ArrayView;\n<span class=\"kw\">use </span>ndarray::arr3;\n<span class=\"kw\">use </span>ndarray::ShapeBuilder;\n\n<span class=\"comment\">// advanced example where we are even specifying exact strides to use (which is optional).\n</span><span class=\"kw\">let </span>s = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>];\n<span class=\"kw\">let </span>a = ArrayView::from_shape((<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>).strides((<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>)),\n                              <span class=\"kw-2\">&amp;</span>s).unwrap();\n\n<span class=\"macro\">assert!</span>(\n    a == arr3(<span class=\"kw-2\">&amp;</span>[[[<span class=\"number\">0</span>, <span class=\"number\">2</span>],\n                 [<span class=\"number\">4</span>, <span class=\"number\">6</span>],\n                 [<span class=\"number\">8</span>, <span class=\"number\">10</span>]],\n                [[<span class=\"number\">1</span>, <span class=\"number\">3</span>],\n                 [<span class=\"number\">5</span>, <span class=\"number\">7</span>],\n                 [<span class=\"number\">9</span>, <span class=\"number\">11</span>]]])\n);\n<span class=\"macro\">assert!</span>(a.strides() == <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_shape_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/constructors.rs.html#107-112\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ndarray/type.ArrayView.html#tymethod.from_shape_ptr\" class=\"fn\">from_shape_ptr</a>&lt;Sh&gt;(shape: Sh, ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*const A</a>) -&gt; Self<div class=\"where\">where\n    Sh: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"ndarray/struct.StrideShape.html\" title=\"struct ndarray::StrideShape\">StrideShape</a>&lt;D&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an <code>ArrayView&lt;A, D&gt;</code> from shape information and a raw pointer to\nthe elements.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The caller is responsible for ensuring all of the following:</p>\n<ul>\n<li>\n<p>The elements seen by moving <code>ptr</code> according to the shape and strides\nmust live at least as long as <code>'a</code> and must not be not mutably\naliased for the duration of <code>'a</code>.</p>\n</li>\n<li>\n<p><code>ptr</code> must be non-null and aligned, and it must be safe to\n<a href=\"https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset\"><code>.offset()</code></a> <code>ptr</code> by zero.</p>\n</li>\n<li>\n<p>It must be safe to <a href=\"https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset\"><code>.offset()</code></a> the pointer repeatedly along all\naxes and calculate the <code>count</code>s for the <code>.offset()</code> calls without\noverflow, even if the array is empty or the elements are zero-sized.</p>\n<p>In other words,</p>\n<ul>\n<li>\n<p>All possible pointers generated by moving along all axes must be in\nbounds or one byte past the end of a single allocation with element\ntype <code>A</code>. The only exceptions are if the array is empty or the element\ntype is zero-sized. In these cases, <code>ptr</code> may be dangling, but it must\nstill be safe to <a href=\"https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset\"><code>.offset()</code></a> the pointer along the axes.</p>\n</li>\n<li>\n<p>The offset in units of bytes between the least address and greatest\naddress by moving along all axes must not exceed <code>isize::MAX</code>. This\nconstraint prevents the computed offset, in bytes, from overflowing\n<code>isize</code> regardless of the starting point due to past offsets.</p>\n</li>\n<li>\n<p>The offset in units of <code>A</code> between the least address and greatest\naddress by moving along all axes must not exceed <code>isize::MAX</code>. This\nconstraint prevents overflow when calculating the <code>count</code> parameter to\n<a href=\"https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset\"><code>.offset()</code></a> regardless of the starting point due to past offsets.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The product of non-zero axis lengths must not exceed <code>isize::MAX</code>.</p>\n</li>\n<li>\n<p>Strides must be non-negative.</p>\n</li>\n</ul>\n<p>This function can use debug assertions to check some of these requirements,\nbut it’s not a complete check.</p>\n</div></details></div></details>",0,"ndarray::aliases::ArrayView0","ndarray::aliases::ArrayView1","ndarray::aliases::ArrayView2","ndarray::aliases::ArrayView3","ndarray::aliases::ArrayView4","ndarray::aliases::ArrayView5","ndarray::aliases::ArrayView6","ndarray::aliases::ArrayViewD"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/conversions.rs.html#23-73\">source</a><a href=\"#impl-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, D&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, A, D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Methods for read-only array views.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.reborrow\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/conversions.rs.html#29-34\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/type.ArrayView.html#tymethod.reborrow\" class=\"fn\">reborrow</a>&lt;'b&gt;(self) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'b, A, D&gt;<div class=\"where\">where\n    'a: 'b,</div></h4></section></summary><div class=\"docblock\"><p>Convert the view into an <code>ArrayView&lt;'b, A, D&gt;</code> where <code>'b</code> is a lifetime\noutlived by <code>'a'</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/conversions.rs.html#41-47\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/type.ArrayView.html#tymethod.to_slice\" class=\"fn\">to_slice</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return the array’s data as a slice, if it is contiguous and in standard order.\nReturn <code>None</code> otherwise.</p>\n<p>Note that while the method is similar to <a href=\"ndarray/struct.ArrayBase.html#method.as_slice\" title=\"method ndarray::ArrayBase::as_slice\"><code>ArrayBase::as_slice()</code></a>, this method transfers\nthe view’s lifetime to the slice, so it is a bit more powerful.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_slice_memory_order\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/conversions.rs.html#55-67\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/type.ArrayView.html#tymethod.to_slice_memory_order\" class=\"fn\">to_slice_memory_order</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return the array’s data as a slice, if it is contiguous.\nReturn <code>None</code> otherwise.</p>\n<p>Note that while the method is similar to\n<a href=\"ndarray/struct.ArrayBase.html#method.as_slice_memory_order\" title=\"method ndarray::ArrayBase::as_slice_memory_order\"><code>ArrayBase::as_slice_memory_order()</code></a>, this method transfers the view’s\nlifetime to the slice, so it is a bit more powerful.</p>\n</div></details></div></details>",0,"ndarray::aliases::ArrayView0","ndarray::aliases::ArrayView1","ndarray::aliases::ArrayView2","ndarray::aliases::ArrayView3","ndarray::aliases::ArrayView4","ndarray::aliases::ArrayView5","ndarray::aliases::ArrayView6","ndarray::aliases::ArrayViewD"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/splitting.rs.html#14-97\">source</a><a href=\"#impl-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, D&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, A, D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Methods for read-only array views.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/splitting.rs.html#91-96\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/type.ArrayView.html#tymethod.split_at\" class=\"fn\">split_at</a>(self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, index: <a class=\"type\" href=\"ndarray/type.Ix.html\" title=\"type ndarray::Ix\">Ix</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.tuple.html\">(Self, Self)</a></h4></section></summary><div class=\"docblock\"><p>Split the array view along <code>axis</code> and return one view strictly before the\nsplit and one view after the split.</p>\n<p><strong>Panics</strong> if <code>axis</code> or <code>index</code> is out of bounds.</p>\n<p><strong>Examples:</strong></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = aview2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],\n                 [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>],\n                 [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]]);\n</code></pre></div>\n<p>The array view <code>a</code> has two axes and shape 3 × 4:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>         ──▶ Axis(1)\n        ┌─────┬─────┬─────┬─────┐ 0\n      │ │ a₀₀ │ a₀₁ │ a₀₂ │ a₀₃ │\n      ▼ ├─────┼─────┼─────┼─────┤ 1\n Axis(0)│ a₁₀ │ a₁₁ │ a₁₂ │ a₁₃ │\n        ├─────┼─────┼─────┼─────┤ 2\n        │ a₂₀ │ a₂₁ │ a₂₂ │ a₂₃ │\n        └─────┴─────┴─────┴─────┘ 3 ↑\n        0     1     2     3     4 ← possible split_at indices.\n</code></pre></div>\n<p>Row indices increase along <code>Axis(0)</code>, and column indices increase along\n<code>Axis(1)</code>. Note that we split “before” an element index, and that\nboth 0 and the endpoint are valid split indices.</p>\n<p><strong>Example 1</strong>: Split <code>a</code> along the first axis, in this case the rows, at\nindex 2.<br>\nThis produces views v1 and v2 of shapes 2 × 4 and 1 × 4:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>(v1, v2) = a.split_at(Axis(<span class=\"number\">0</span>), <span class=\"number\">2</span>);</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>        ┌─────┬─────┬─────┬─────┐       0  ↓ indices\n        │ a₀₀ │ a₀₁ │ a₀₂ │ a₀₃ │            along Axis(0)\n        ├─────┼─────┼─────┼─────┤ v1    1\n        │ a₁₀ │ a₁₁ │ a₁₂ │ a₁₃ │\n        └─────┴─────┴─────┴─────┘\n        ┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄       2\n        ┌─────┬─────┬─────┬─────┐\n        │ a₂₀ │ a₂₁ │ a₂₂ │ a₂₃ │ v2\n        └─────┴─────┴─────┴─────┘       3\n</code></pre></div>\n<p><strong>Example 2</strong>: Split <code>a</code> along the second axis, in this case the\ncolumns, at index 2.<br>\nThis produces views u1 and u2 of shapes 3 × 2 and 3 × 2:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>(u1, u2) = a.split_at(Axis(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n</code></pre></div>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>             u1             u2\n        ┌─────┬─────┐┊┌─────┬─────┐\n        │ a₀₀ │ a₀₁ │┊│ a₀₂ │ a₀₃ │\n        ├─────┼─────┤┊├─────┼─────┤\n        │ a₁₀ │ a₁₁ │┊│ a₁₂ │ a₁₃ │\n        ├─────┼─────┤┊├─────┼─────┤\n        │ a₂₀ │ a₂₁ │┊│ a₂₂ │ a₂₃ │\n        └─────┴─────┘┊└─────┴─────┘\n        0     1      2      3     4  indices →\n                                     along Axis(1)\n</code></pre></div></div></details></div></details>",0,"ndarray::aliases::ArrayView0","ndarray::aliases::ArrayView1","ndarray::aliases::ArrayView2","ndarray::aliases::ArrayView3","ndarray::aliases::ArrayView4","ndarray::aliases::ArrayView5","ndarray::aliases::ArrayView6","ndarray::aliases::ArrayViewD"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CViewRepr%3C%26A%3E,+Dim%3C%5Busize;+0%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/conversions.rs.html#78-99\">source</a><a href=\"#impl-ArrayBase%3CViewRepr%3C%26A%3E,+Dim%3C%5Busize;+0%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, A, <a class=\"type\" href=\"ndarray/type.Ix0.html\" title=\"type ndarray::Ix0\">Ix0</a>&gt;</h3></section></summary><div class=\"docblock\"><p>Methods specific to <code>ArrayView0</code>.</p>\n<p><em><strong>See also all methods for <a href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\"><code>ArrayView</code></a> and <a href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\"><code>ArrayBase</code></a></strong></em></p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_scalar\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/conversions.rs.html#96-98\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/type.ArrayView.html#tymethod.into_scalar\" class=\"fn\">into_scalar</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a A</a></h4></section></summary><div class=\"docblock\"><p>Consume the view and return a reference to the single element in the array.</p>\n<p>The lifetime of the returned reference matches the lifetime of the data\nthe array view was pointing to.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{arr0, Array0};\n\n<span class=\"comment\">// `Foo` doesn't implement `Clone`.\n</span><span class=\"attr\">#[derive(Debug, Eq, PartialEq)]\n</span><span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">let </span>array: Array0&lt;Foo&gt; = arr0(Foo);\n<span class=\"kw\">let </span>view = array.view();\n<span class=\"kw\">let </span>scalar: <span class=\"kw-2\">&amp;</span>Foo = view.into_scalar();\n<span class=\"macro\">assert_eq!</span>(scalar, <span class=\"kw-2\">&amp;</span>Foo);</code></pre></div>\n</div></details></div></details>",0,"ndarray::aliases::ArrayView0"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CViewRepr%3C%26Complex%3CT%3E%3E,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/splitting.rs.html#99-128\">source</a><a href=\"#impl-ArrayBase%3CViewRepr%3C%26Complex%3CT%3E%3E,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, D&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;T&gt;, D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_complex\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_views/splitting.rs.html#119-127\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/type.ArrayView.html#tymethod.split_complex\" class=\"fn\">split_complex</a>(self) -&gt; <a class=\"struct\" href=\"num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, T, D&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Splits the view into views of the real and imaginary components of the\nelements.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>num_complex::{Complex, Complex64};\n\n<span class=\"kw\">let </span>arr = <span class=\"macro\">array!</span>[\n    [Complex64::new(<span class=\"number\">1.</span>, <span class=\"number\">2.</span>), Complex64::new(<span class=\"number\">3.</span>, <span class=\"number\">4.</span>)],\n    [Complex64::new(<span class=\"number\">5.</span>, <span class=\"number\">6.</span>), Complex64::new(<span class=\"number\">7.</span>, <span class=\"number\">8.</span>)],\n    [Complex64::new(<span class=\"number\">9.</span>, <span class=\"number\">10.</span>), Complex64::new(<span class=\"number\">11.</span>, <span class=\"number\">12.</span>)],\n];\n<span class=\"kw\">let </span>Complex { re, im } = arr.view().split_complex();\n<span class=\"macro\">assert_eq!</span>(re, <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">3.</span>], [<span class=\"number\">5.</span>, <span class=\"number\">7.</span>], [<span class=\"number\">9.</span>, <span class=\"number\">11.</span>]]);\n<span class=\"macro\">assert_eq!</span>(im, <span class=\"macro\">array!</span>[[<span class=\"number\">2.</span>, <span class=\"number\">4.</span>], [<span class=\"number\">6.</span>, <span class=\"number\">8.</span>], [<span class=\"number\">10.</span>, <span class=\"number\">12.</span>]]);</code></pre></div>\n</div></details></div></details>",0,"ndarray::aliases::ArrayView0","ndarray::aliases::ArrayView1","ndarray::aliases::ArrayView2","ndarray::aliases::ArrayView3","ndarray::aliases::ArrayView4","ndarray::aliases::ArrayView5","ndarray::aliases::ArrayView6","ndarray::aliases::ArrayViewD"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26ArrayBase%3CS,+D%3E%3E-for-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#327-336\">source</a><a href=\"#impl-From%3C%26ArrayBase%3CS,+D%3E%3E-for-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of <code>ArrayView::from(&amp;A)</code> where <code>A</code> is an array.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#333-335\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: &amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a read-only array view of the array.</p>\n</div></details></div></details>","From<&'a ArrayBase<S, D>>","ndarray::aliases::ArrayView0","ndarray::aliases::ArrayView1","ndarray::aliases::ArrayView2","ndarray::aliases::ArrayView3","ndarray::aliases::ArrayView4","ndarray::aliases::ArrayView5","ndarray::aliases::ArrayView6","ndarray::aliases::ArrayViewD"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26Slice%3E-for-ArrayBase%3CViewRepr%3C%26A%3E,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#307-324\">source</a><a href=\"#impl-From%3C%26Slice%3E-for-ArrayBase%3CViewRepr%3C%26A%3E,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, Slice&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a Slice</a>&gt; for <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, A, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    Slice: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"docblock\"><p>Implementation of <code>ArrayView::from(&amp;S)</code> where <code>S</code> is a slice or sliceable.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#314-323\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a Slice</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional read-only array view of the data in <code>slice</code>.</p>\n<p><strong>Panics</strong> if the slice length is greater than <code>isize::MAX</code>.</p>\n</div></details></div></details>","From<&'a Slice>","ndarray::aliases::ArrayView1"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#231-241\">source</a><a href=\"#impl-IntoIterator-for-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, A, D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a A</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"ndarray/iter/struct.Iter.html\" title=\"struct ndarray::iter::Iter\">Iter</a>&lt;'a, A, D&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#238-240\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","ndarray::aliases::ArrayView0","ndarray::aliases::ArrayView1","ndarray::aliases::ArrayView2","ndarray::aliases::ArrayView3","ndarray::aliases::ArrayView4","ndarray::aliases::ArrayView5","ndarray::aliases::ArrayView6","ndarray::aliases::ArrayViewD"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NdProducer-for-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/zip/ndproducer.rs.html#191-235\">source</a><a href=\"#impl-NdProducer-for-ArrayBase%3CViewRepr%3C%26A%3E,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>&gt; <a class=\"trait\" href=\"ndarray/trait.NdProducer.html\" title=\"trait ndarray::NdProducer\">NdProducer</a> for <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'a, A, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ndarray/trait.NdProducer.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a A</a></h4></section></summary><div class='docblock'>The element produced per iteration.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Dim\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Dim\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ndarray/trait.NdProducer.html#associatedtype.Dim\" class=\"associatedtype\">Dim</a> = D</h4></section></summary><div class='docblock'>Dimension type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_dim\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/zip/ndproducer.rs.html#199-201\">source</a><a href=\"#method.raw_dim\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ndarray/trait.NdProducer.html#tymethod.raw_dim\" class=\"fn\">raw_dim</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"ndarray/trait.NdProducer.html#associatedtype.Dim\" title=\"type ndarray::NdProducer::Dim\">Dim</a></h4></section></summary><div class='docblock'>Return the shape of the producer.</div></details></div></details>","NdProducer","ndarray::aliases::ArrayView0","ndarray::aliases::ArrayView1","ndarray::aliases::ArrayView2","ndarray::aliases::ArrayView3","ndarray::aliases::ArrayView4","ndarray::aliases::ArrayView5","ndarray::aliases::ArrayView6","ndarray::aliases::ArrayViewD"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()