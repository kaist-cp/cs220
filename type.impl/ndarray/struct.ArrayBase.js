(function() {var type_impls = {
"ndarray":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#306\">source</a><a href=\"#impl-Add%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\naddition\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#306\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#306\">source</a><a href=\"#impl-Add%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\naddition\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#306\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#306\">source</a><a href=\"#impl-Add%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\naddition\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#306\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#474-478\">source</a><a href=\"#impl-AddAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self += rhs</code> as elementwise addition (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#474-478\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#474-478\">source</a><a href=\"#impl-AddAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self += rhs</code> as elementwise addition (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#474-478\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#301-673\">source</a><a href=\"#impl-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, A, D&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><h5 id=\"constructor-methods-for-n-dimensional-arrays\"><a class=\"doc-anchor\" href=\"#constructor-methods-for-n-dimensional-arrays\">§</a>Constructor methods for n-dimensional arrays.</h5>\n<p>The <code>shape</code> argument can be an integer or a tuple of integers to specify\na static size. For example <code>10</code> makes a length 10 one-dimensional array\n(dimension type <code>Ix1</code>) and <code>(5, 6)</code> a 5 × 6 array (dimension type <code>Ix2</code>).</p>\n<p>With the trait <code>ShapeBuilder</code> in scope, there is the method <code>.f()</code> to select\ncolumn major (“f” order) memory layout instead of the default row major.\nFor example <code>Array::zeros((5, 6).f())</code> makes a column major 5 × 6 array.</p>\n<p>Use <a href=\"ndarray/type.IxDyn.html\" title=\"type ndarray::IxDyn\"><code>IxDyn</code></a> for the shape to create an array with dynamic\nnumber of axes.</p>\n<p>Finally, the few constructors that take a completely general\n<code>Into&lt;StrideShape&gt;</code> argument <em>optionally</em> support custom strides, for\nexample a shape given like <code>(10, 2, 2).strides((1, 10, 20))</code> is valid.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_elem\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#326-335\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.from_elem\" class=\"fn\">from_elem</a>&lt;Sh&gt;(shape: Sh, elem: A) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an array with copies of <code>elem</code>, shape <code>shape</code>.</p>\n<p><strong>Panics</strong> if the product of non-zero axis lengths overflows <code>isize</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Array, arr3, ShapeBuilder};\n\n<span class=\"kw\">let </span>a = Array::from_elem((<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>), <span class=\"number\">1.</span>);\n\n<span class=\"macro\">assert!</span>(\n    a == arr3(<span class=\"kw-2\">&amp;</span>[[[<span class=\"number\">1.</span>, <span class=\"number\">1.</span>],\n                 [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>]],\n                [[<span class=\"number\">1.</span>, <span class=\"number\">1.</span>],\n                 [<span class=\"number\">1.</span>, <span class=\"number\">1.</span>]]])\n);\n<span class=\"macro\">assert!</span>(a.strides() == <span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]);\n\n<span class=\"kw\">let </span>b = Array::from_elem((<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>).f(), <span class=\"number\">1.</span>);\n<span class=\"macro\">assert!</span>(b.strides() == <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeros\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#340-346\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.zeros\" class=\"fn\">zeros</a>&lt;Sh&gt;(shape: Sh) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a>,\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an array with zeros, shape <code>shape</code>.</p>\n<p><strong>Panics</strong> if the product of non-zero axis lengths overflows <code>isize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ones\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#351-357\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.ones\" class=\"fn\">ones</a>&lt;Sh&gt;(shape: Sh) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a>,\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an array with ones, shape <code>shape</code>.</p>\n<p><strong>Panics</strong> if the product of non-zero axis lengths overflows <code>isize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#362-368\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.default\" class=\"fn\">default</a>&lt;Sh&gt;(shape: Sh) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an array with default values, shape <code>shape</code></p>\n<p><strong>Panics</strong> if the product of non-zero axis lengths overflows <code>isize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_shape_simple_fn\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#380-389\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.from_shape_simple_fn\" class=\"fn\">from_shape_simple_fn</a>&lt;Sh, F&gt;(shape: Sh, f: F) -&gt; Self<div class=\"where\">where\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; A,</div></h4></section></summary><div class=\"docblock\"><p>Create an array with values created by the function <code>f</code>.</p>\n<p><code>f</code> is called with no argument, and it should return the element to\ncreate. If the precise index of the element to create is needed,\nuse <a href=\"ndarray/struct.ArrayBase.html#method.from_shape_fn\" title=\"associated function ndarray::ArrayBase::from_shape_fn\"><code>from_shape_fn</code></a> instead.</p>\n<p>This constructor can be useful if the element order is not important,\nfor example if they are identical or random.</p>\n<p><strong>Panics</strong> if the product of non-zero axis lengths overflows <code>isize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_shape_fn\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#411-426\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.from_shape_fn\" class=\"fn\">from_shape_fn</a>&lt;Sh, F&gt;(shape: Sh, f: F) -&gt; Self<div class=\"where\">where\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Pattern\" title=\"type ndarray::Dimension::Pattern\">Pattern</a>) -&gt; A,</div></h4></section></summary><div class=\"docblock\"><p>Create an array with values created by the function <code>f</code>.</p>\n<p><code>f</code> is called with the index of the element to create; the elements are\nvisited in arbitrary order.</p>\n<p><strong>Panics</strong> if the product of non-zero axis lengths overflows <code>isize</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Array, arr2};\n\n<span class=\"comment\">// Create a table of i × j (with i and j from 1 to 3)\n</span><span class=\"kw\">let </span>ij_table = Array::from_shape_fn((<span class=\"number\">3</span>, <span class=\"number\">3</span>), |(i, j)| (<span class=\"number\">1 </span>+ i) * (<span class=\"number\">1 </span>+ j));\n\n<span class=\"macro\">assert_eq!</span>(\n    ij_table,\n    arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],\n           [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>],\n           [<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>]])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_shape_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#461-467\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.from_shape_vec\" class=\"fn\">from_shape_vec</a>&lt;Sh&gt;(shape: Sh, v: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"ndarray/struct.ShapeError.html\" title=\"struct ndarray::ShapeError\">ShapeError</a>&gt;<div class=\"where\">where\n    Sh: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"ndarray/struct.StrideShape.html\" title=\"struct ndarray::StrideShape\">StrideShape</a>&lt;D&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an array with the given shape from a vector. (No cloning of\nelements needed.)</p>\n<hr />\n<p>For a contiguous c- or f-order shape, the following applies:</p>\n<p><strong>Errors</strong> if <code>shape</code> does not correspond to the number of elements in\n<code>v</code> or if the shape/strides would result in overflowing <code>isize</code>.</p>\n<hr />\n<p>For custom strides, the following applies:</p>\n<p><strong>Errors</strong> if strides and dimensions can point out of bounds of <code>v</code>, if\nstrides allow multiple indices to point to the same element, or if the\nshape/strides would result in overflowing <code>isize</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array;\n<span class=\"kw\">use </span>ndarray::ShapeBuilder; <span class=\"comment\">// Needed for .strides() method\n</span><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span>a = Array::from_shape_vec((<span class=\"number\">2</span>, <span class=\"number\">2</span>), <span class=\"macro\">vec!</span>[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>]);\n<span class=\"macro\">assert!</span>(a.is_ok());\n\n<span class=\"kw\">let </span>b = Array::from_shape_vec((<span class=\"number\">2</span>, <span class=\"number\">2</span>).strides((<span class=\"number\">1</span>, <span class=\"number\">2</span>)),\n                              <span class=\"macro\">vec!</span>[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>]).unwrap();\n<span class=\"macro\">assert!</span>(\n    b == arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">3.</span>],\n                [<span class=\"number\">2.</span>, <span class=\"number\">4.</span>]])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_shape_vec_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#504-512\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.from_shape_vec_unchecked\" class=\"fn\">from_shape_vec_unchecked</a>&lt;Sh&gt;(shape: Sh, v: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;) -&gt; Self<div class=\"where\">where\n    Sh: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"ndarray/struct.StrideShape.html\" title=\"struct ndarray::StrideShape\">StrideShape</a>&lt;D&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates an array from a vector and interpret it according to the\nprovided shape and strides. (No cloning of elements needed.)</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The caller must ensure that the following conditions are met:</p>\n<ol>\n<li>\n<p>The ndim of <code>dim</code> and <code>strides</code> must be the same.</p>\n</li>\n<li>\n<p>The product of non-zero axis lengths must not exceed <code>isize::MAX</code>.</p>\n</li>\n<li>\n<p>For axes with length &gt; 1, the pointer cannot move outside the\nslice.</p>\n</li>\n<li>\n<p>If the array will be empty (any axes are zero-length), the\ndifference between the least address and greatest address accessible\nby moving along all axes must be ≤ <code>v.len()</code>.</p>\n<p>If the array will not be empty, the difference between the least\naddress and greatest address accessible by moving along all axes\nmust be &lt; <code>v.len()</code>.</p>\n</li>\n<li>\n<p>The strides must not allow any element to be referenced by two different\nindices.</p>\n</li>\n</ol>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uninit\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#588-599\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.uninit\" class=\"fn\">uninit</a>&lt;Sh&gt;(shape: Sh) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S::<a class=\"associatedtype\" href=\"ndarray/trait.DataOwned.html#associatedtype.MaybeUninit\" title=\"type ndarray::DataOwned::MaybeUninit\">MaybeUninit</a>, D&gt;<div class=\"where\">where\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create an array with uninitialized elements, shape <code>shape</code>.</p>\n<p>The uninitialized elements of type <code>A</code> are represented by the type <code>MaybeUninit&lt;A&gt;</code>,\nan easier way to handle uninit values correctly.</p>\n<p>Only <em>when</em> the array is completely initialized with valid elements, can it be\nconverted to an array of <code>A</code> elements using <a href=\"ndarray/struct.ArrayBase.html#method.assume_init\" title=\"method ndarray::ArrayBase::assume_init\"><code>.assume_init()</code></a>.</p>\n<p><strong>Panics</strong> if the number of elements in <code>shape</code> would overflow isize.</p>\n<h6 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h6>\n<p>The whole of the array must be initialized before it is converted\nusing <a href=\"ndarray/struct.ArrayBase.html#method.assume_init\" title=\"method ndarray::ArrayBase::assume_init\"><code>.assume_init()</code></a> or otherwise traversed/read with the element type <code>A</code>.</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h6>\n<p>It is possible to assign individual values through <code>*elt = MaybeUninit::new(value)</code>\nand so on.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{s, Array2};\n\n<span class=\"comment\">// Example Task: Let's create a column shifted copy of the input\n\n</span><span class=\"kw\">fn </span>shift_by_two(a: <span class=\"kw-2\">&amp;</span>Array2&lt;f32&gt;) -&gt; Array2&lt;f32&gt; {\n    <span class=\"comment\">// create an uninitialized array\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = Array2::uninit(a.dim());\n\n    <span class=\"comment\">// two first columns in b are two last in a\n    // rest of columns in b are the initial columns in a\n\n    </span>a.slice(<span class=\"macro\">s!</span>[.., -<span class=\"number\">2</span>..]).assign_to(b.slice_mut(<span class=\"macro\">s!</span>[.., ..<span class=\"number\">2</span>]));\n    a.slice(<span class=\"macro\">s!</span>[.., <span class=\"number\">2</span>..]).assign_to(b.slice_mut(<span class=\"macro\">s!</span>[.., ..-<span class=\"number\">2</span>]));\n\n    <span class=\"comment\">// Now we can promise that `b` is safe to use with all operations\n    </span><span class=\"kw\">unsafe </span>{\n        b.assume_init()\n    }\n}\n </code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.build_uninit\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#622-633\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.build_uninit\" class=\"fn\">build_uninit</a>&lt;Sh, F&gt;(\n    shape: Sh,\n    builder: F,\n) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S::<a class=\"associatedtype\" href=\"ndarray/trait.DataOwned.html#associatedtype.MaybeUninit\" title=\"type ndarray::DataOwned::MaybeUninit\">MaybeUninit</a>, D&gt;<div class=\"where\">where\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"type\" href=\"ndarray/type.ArrayViewMut.html\" title=\"type ndarray::ArrayViewMut\">ArrayViewMut</a>&lt;'_, <a class=\"union\" href=\"https://doc.rust-lang.org/1.81.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;A&gt;, D&gt;),</div></h4></section></summary><div class=\"docblock\"><p>Create an array with uninitialized elements, shape <code>shape</code>.</p>\n<p>The uninitialized elements of type <code>A</code> are represented by the type <code>MaybeUninit&lt;A&gt;</code>,\nan easier way to handle uninit values correctly.</p>\n<p>The <code>builder</code> closure gets unshared access to the array through a view and can use it to\nmodify the array before it is returned. This allows initializing the array for any owned\narray type (avoiding clone requirements for copy-on-write, because the array is unshared\nwhen initially created).</p>\n<p>Only <em>when</em> the array is completely initialized with valid elements, can it be\nconverted to an array of <code>A</code> elements using <a href=\"ndarray/struct.ArrayBase.html#method.assume_init\" title=\"method ndarray::ArrayBase::assume_init\"><code>.assume_init()</code></a>.</p>\n<p><strong>Panics</strong> if the number of elements in <code>shape</code> would overflow isize.</p>\n<h6 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h6>\n<p>The whole of the array must be initialized before it is converted\nusing <a href=\"ndarray/struct.ArrayBase.html#method.assume_init\" title=\"method ndarray::ArrayBase::assume_init\"><code>.assume_init()</code></a> or otherwise traversed/read with the element type <code>A</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uninitialized\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#661-671\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.uninitialized\" class=\"fn\">uninitialized</a>&lt;Sh&gt;(shape: Sh) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: This method is hard to use correctly. Use <code>uninit</code> instead.</span></div></span></summary><div class=\"docblock\"><p>Create an array with uninitialized elements, shape <code>shape</code>.</p>\n<p>Prefer to use <a href=\"ndarray/struct.ArrayBase.html#method.uninit\" title=\"associated function ndarray::ArrayBase::uninit\"><code>uninit()</code></a> if possible, because it is\neasier to use correctly.</p>\n<p><strong>Panics</strong> if the number of elements in <code>shape</code> would overflow isize.</p>\n<h6 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h6>\n<p>Accessing uninitialized values is undefined behaviour. You must overwrite <em>all</em> the elements\nin the array after it is created; for example using\n<a href=\"ndarray/struct.ArrayBase.html#method.raw_view_mut\" title=\"method ndarray::ArrayBase::raw_view_mut\"><code>raw_view_mut</code></a> or other low-level element access.</p>\n<p>The contents of the array is indeterminate before initialization and it\nis an error to perform operations that use the previous values. For\nexample it would not be legal to use <code>a += 1.;</code> on such an array.</p>\n<p>This constructor is limited to elements where <code>A: Copy</code> (no destructors)\nto avoid users shooting themselves too hard in the foot.</p>\n<p>(Also note that the constructors <code>from_shape_vec</code> and\n<code>from_shape_vec_unchecked</code> allow the user yet more control, in the sense\nthat Arrays can be created from arbitrary vectors.)</p>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#675-696\">source</a><a href=\"#impl-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, A, D&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"union\" href=\"https://doc.rust-lang.org/1.81.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;A&gt;&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.maybe_uninit\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#684-695\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.maybe_uninit\" class=\"fn\">maybe_uninit</a>&lt;Sh&gt;(shape: Sh) -&gt; Self<div class=\"where\">where\n    Sh: <a class=\"trait\" href=\"ndarray/trait.ShapeBuilder.html\" title=\"trait ndarray::ShapeBuilder\">ShapeBuilder</a>&lt;Dim = D&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Renamed to <code>uninit</code></span></div></span></summary><div class=\"docblock\"><p>Create an array with uninitialized elements, shape <code>shape</code>.</p>\n<p>This method has been renamed to <code>uninit</code></p>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#44-2860\">source</a><a href=\"#impl-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.RawData.html\" title=\"trait ndarray::RawData\">RawData</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><h4 id=\"methods-for-all-array-types\"><a class=\"doc-anchor\" href=\"#methods-for-all-array-types\">§</a>Methods For All Array Types</h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#50-52\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the total number of elements in the array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len_of\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#60-62\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.len_of\" class=\"fn\">len_of</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the length of <code>axis</code>.</p>\n<p>The axis should be in the range <code>Axis(</code> 0 .. <em>n</em> <code>)</code> where <em>n</em> is the\nnumber of dimensions (axes) of the array.</p>\n<p><em><strong>Panics</strong></em> if the axis is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#65-67\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return whether the array has any elements</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ndim\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#70-72\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.ndim\" class=\"fn\">ndim</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of dimensions (axes) in the array</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dim\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#77-79\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.dim\" class=\"fn\">dim</a>(&amp;self) -&gt; D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Pattern\" title=\"type ndarray::Dimension::Pattern\">Pattern</a></h4></section></summary><div class=\"docblock\"><p>Return the shape of the array in its “pattern” form,\nan integer in the one-dimensional case, tuple in the n-dimensional cases\nand so on.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_dim\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#95-97\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.raw_dim\" class=\"fn\">raw_dim</a>(&amp;self) -&gt; D</h4></section></summary><div class=\"docblock\"><p>Return the shape of the array as it’s stored in the array.</p>\n<p>This is primarily useful for passing to other <code>ArrayBase</code>\nfunctions, such as when creating another array of the same\nshape and dimensionality.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array;\n\n<span class=\"kw\">let </span>a = Array::from_elem((<span class=\"number\">2</span>, <span class=\"number\">3</span>), <span class=\"number\">5.</span>);\n\n<span class=\"comment\">// Create an array of zeros that's the same shape and dimensionality as `a`.\n</span><span class=\"kw\">let </span>b = Array::&lt;f64, <span class=\"kw\">_</span>&gt;::zeros(a.raw_dim());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shape\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#123-125\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.shape\" class=\"fn\">shape</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>]</h4></section></summary><div class=\"docblock\"><p>Return the shape of the array as a slice.</p>\n<p>Note that you probably don’t want to use this to create an array of the\nsame shape as another array because creating an array with e.g.\n<a href=\"ndarray/struct.ArrayBase.html#method.zeros\" title=\"associated function ndarray::ArrayBase::zeros\"><code>Array::zeros()</code></a> using a shape of type <code>&amp;[usize]</code>\nresults in a dynamic-dimensional array. If you want to create an array\nthat has the same shape and dimensionality as another array, use\n<a href=\"ndarray/struct.ArrayBase.html#method.raw_dim\" title=\"method ndarray::ArrayBase::raw_dim\"><code>.raw_dim()</code></a> instead:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Array, Array2};\n\n<span class=\"kw\">let </span>a = Array2::&lt;i32&gt;::zeros((<span class=\"number\">3</span>, <span class=\"number\">4</span>));\n<span class=\"kw\">let </span>shape = a.shape();\n<span class=\"macro\">assert_eq!</span>(shape, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// Since `a.shape()` returned `&amp;[usize]`, we get an `ArrayD` instance:\n</span><span class=\"kw\">let </span>b = Array::zeros(shape);\n<span class=\"macro\">assert_eq!</span>(a.clone().into_dyn(), b);\n\n<span class=\"comment\">// To get the same dimension type, use `.raw_dim()` instead:\n</span><span class=\"kw\">let </span>c = Array::zeros(a.raw_dim());\n<span class=\"macro\">assert_eq!</span>(a, c);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strides\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#128-132\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.strides\" class=\"fn\">strides</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.isize.html\">isize</a>]</h4></section></summary><div class=\"docblock\"><p>Return the strides of the array as a slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stride_of\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#140-143\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.stride_of\" class=\"fn\">stride_of</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Return the stride of <code>axis</code>.</p>\n<p>The axis should be in the range <code>Axis(</code> 0 .. <em>n</em> <code>)</code> where <em>n</em> is the\nnumber of dimensions (axes) of the array.</p>\n<p><em><strong>Panics</strong></em> if the axis is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.view\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#146-152\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.view\" class=\"fn\">view</a>(&amp;self) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a read-only view of the array</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.view_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#155-161\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.view_mut\" class=\"fn\">view_mut</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayViewMut.html\" title=\"type ndarray::ArrayViewMut\">ArrayViewMut</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a read-write view of the array</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cell_view\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#170-175\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.cell_view\" class=\"fn\">cell_view</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'_, <a class=\"struct\" href=\"ndarray/struct.MathCell.html\" title=\"struct ndarray::MathCell\">MathCell</a>&lt;A&gt;, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a shared view of the array with elements as if they were embedded in cells.</p>\n<p>The cell view requires a mutable borrow of the array. Once borrowed the\ncell view itself can be copied and accessed without exclusivity.</p>\n<p>The view acts “as if” the elements are temporarily in cells, and elements\ncan be changed through shared references using the regular cell methods.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#207-222\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an uniquely owned copy of the array.</p>\n<p>If the input array is contiguous, then the output array will have the same\nmemory layout. Otherwise, the layout of the output array is unspecified.\nIf you need a particular layout, you can allocate a new array with the\ndesired memory layout and <a href=\"ndarray/struct.ArrayBase.html#method.assign\" title=\"method ndarray::ArrayBase::assign\"><code>.assign()</code></a> the data.\nAlternatively, you can collectan iterator, like this for a result in\nstandard layout:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>Array::from_shape_vec(arr.raw_dim(), arr.iter().cloned().collect()).unwrap()</code></pre></div>\n<p>or this for a result in column-major (Fortran) layout:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>Array::from_shape_vec(arr.raw_dim().f(), arr.t().iter().cloned().collect()).unwrap()</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_shared\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#226-232\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.to_shared\" class=\"fn\">to_shared</a>(&amp;self) -&gt; <a class=\"type\" href=\"ndarray/type.ArcArray.html\" title=\"type ndarray::ArcArray\">ArcArray</a>&lt;A, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a shared ownership (copy on write) array, cloning the array\nelements if necessary.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_owned\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#236-242\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.into_owned\" class=\"fn\">into_owned</a>(self) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Turn the array into a uniquely owned array, cloning the array elements\nif necessary.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_into_owned_nocopy\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#265-270\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.try_into_owned_nocopy\" class=\"fn\">try_into_owned_nocopy</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, D&gt;, Self&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Converts the array into <code>Array&lt;A, D&gt;</code> if this is possible without\ncloning the array elements. Otherwise, returns <code>self</code> unchanged.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{array, rcarr2, ArcArray2, Array2};\n\n<span class=\"comment\">// Reference-counted, clone-on-write `ArcArray`.\n</span><span class=\"kw\">let </span>a: ArcArray2&lt;<span class=\"kw\">_</span>&gt; = rcarr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]]);\n{\n    <span class=\"comment\">// Another reference to the same data.\n    </span><span class=\"kw\">let </span>b: ArcArray2&lt;<span class=\"kw\">_</span>&gt; = a.clone();\n    <span class=\"comment\">// Since there are two references to the same data, `.into_owned()`\n    // would require cloning the data, so `.try_into_owned_nocopy()`\n    // returns `Err`.\n    </span><span class=\"macro\">assert!</span>(b.try_into_owned_nocopy().is_err());\n}\n<span class=\"comment\">// Here, since the second reference has been dropped, the `ArcArray`\n// can be converted into an `Array` without cloning the data.\n</span><span class=\"kw\">let </span>unique: Array2&lt;<span class=\"kw\">_</span>&gt; = a.try_into_owned_nocopy().unwrap();\n<span class=\"macro\">assert_eq!</span>(unique, <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_shared\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#274-283\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.into_shared\" class=\"fn\">into_shared</a>(self) -&gt; <a class=\"type\" href=\"ndarray/type.ArcArray.html\" title=\"type ndarray::ArcArray\">ArcArray</a>&lt;A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>,</div></h4></section></summary><div class=\"docblock\"><p>Turn the array into a shared ownership (copy on write) array,\nwithout any copying.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#300-309\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.first\" class=\"fn\">first</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;A</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the first element of the array, or <code>None</code> if it\nis empty.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array3;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = Array3::&lt;f64&gt;::zeros([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>]);\na[[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]] = <span class=\"number\">42.</span>;\n<span class=\"macro\">assert_eq!</span>(a.first(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">42.</span>));\n\n<span class=\"kw\">let </span>b = Array3::&lt;f64&gt;::zeros([<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>(b.first(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.first_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#326-335\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.first_mut\" class=\"fn\">first_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut A</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the first element of the array, or\n<code>None</code> if it is empty.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array3;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = Array3::&lt;f64&gt;::zeros([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>]);\n<span class=\"kw-2\">*</span>a.first_mut().unwrap() = <span class=\"number\">42.</span>;\n<span class=\"macro\">assert_eq!</span>(a[[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]], <span class=\"number\">42.</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = Array3::&lt;f64&gt;::zeros([<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>(b.first_mut(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#352-365\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.last\" class=\"fn\">last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;A</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the last element of the array, or <code>None</code> if it\nis empty.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array3;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = Array3::&lt;f64&gt;::zeros([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>]);\na[[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]] = <span class=\"number\">42.</span>;\n<span class=\"macro\">assert_eq!</span>(a.last(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">42.</span>));\n\n<span class=\"kw\">let </span>b = Array3::&lt;f64&gt;::zeros([<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>(b.last(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#382-395\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.last_mut\" class=\"fn\">last_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut A</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the last element of the array, or <code>None</code>\nif it is empty.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array3;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = Array3::&lt;f64&gt;::zeros([<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>]);\n<span class=\"kw-2\">*</span>a.last_mut().unwrap() = <span class=\"number\">42.</span>;\n<span class=\"macro\">assert_eq!</span>(a[[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]], <span class=\"number\">42.</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = Array3::&lt;f64&gt;::zeros([<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>(b.last_mut(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#403-409\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.Iter.html\" title=\"struct ndarray::iter::Iter\">Iter</a>&lt;'_, A, D&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter&lt;&#39;_, A, D&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator of references to the elements of the array.</p>\n<p>Elements are visited in the <em>logical order</em> of the array, which\nis where the rightmost index is varying the fastest.</p>\n<p>Iterator element type is <code>&amp;A</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#417-422\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.IterMut.html\" title=\"struct ndarray::iter::IterMut\">IterMut</a>&lt;'_, A, D&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut&lt;&#39;_, A, D&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator of mutable references to the elements of the array.</p>\n<p>Elements are visited in the <em>logical order</em> of the array, which\nis where the rightmost index is varying the fastest.</p>\n<p>Iterator element type is <code>&amp;mut A</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.indexed_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#432-437\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.indexed_iter\" class=\"fn\">indexed_iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.IndexedIter.html\" title=\"struct ndarray::iter::IndexedIter\">IndexedIter</a>&lt;'_, A, D&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IndexedIter&lt;&#39;_, A, D&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator of indexes and references to the elements of the array.</p>\n<p>Elements are visited in the <em>logical order</em> of the array, which\nis where the rightmost index is varying the fastest.</p>\n<p>Iterator element type is <code>(D::Pattern, &amp;A)</code>.</p>\n<p>See also <a href=\"ndarray/struct.Zip.html#method.indexed\" title=\"associated function ndarray::Zip::indexed\"><code>Zip::indexed</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.indexed_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#445-450\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.indexed_iter_mut\" class=\"fn\">indexed_iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.IndexedIterMut.html\" title=\"struct ndarray::iter::IndexedIterMut\">IndexedIterMut</a>&lt;'_, A, D&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IndexedIterMut&lt;&#39;_, A, D&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator of indexes and mutable references to the elements of the array.</p>\n<p>Elements are visited in the <em>logical order</em> of the array, which\nis where the rightmost index is varying the fastest.</p>\n<p>Iterator element type is <code>(D::Pattern, &amp;mut A)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#459-465\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice\" class=\"fn\">slice</a>&lt;I&gt;(&amp;self, info: I) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'_, A, I::<a class=\"associatedtype\" href=\"ndarray/trait.SliceArg.html#associatedtype.OutDim\" title=\"type ndarray::SliceArg::OutDim\">OutDim</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"ndarray/trait.SliceArg.html\" title=\"trait ndarray::SliceArg\">SliceArg</a>&lt;D&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a sliced view of the array.</p>\n<p>See <a href=\"#slicing\"><em>Slicing</em></a> for full documentation.\nSee also <a href=\"ndarray/prelude/macro.s.html\" title=\"macro ndarray::prelude::s\"><code>s!</code></a>, <a href=\"ndarray/trait.SliceArg.html\" title=\"trait ndarray::SliceArg\"><code>SliceArg</code></a>, and <a href=\"ndarray/struct.SliceInfo.html\" title=\"struct ndarray::SliceInfo\"><code>SliceInfo</code></a>.</p>\n<p><strong>Panics</strong> if an index is out of bounds or step size is zero.<br>\n(<strong>Panics</strong> if <code>D</code> is <code>IxDyn</code> and <code>info</code> does not match the number of array axes.)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#474-480\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice_mut\" class=\"fn\">slice_mut</a>&lt;I&gt;(&amp;mut self, info: I) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayViewMut.html\" title=\"type ndarray::ArrayViewMut\">ArrayViewMut</a>&lt;'_, A, I::<a class=\"associatedtype\" href=\"ndarray/trait.SliceArg.html#associatedtype.OutDim\" title=\"type ndarray::SliceArg::OutDim\">OutDim</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"ndarray/trait.SliceArg.html\" title=\"trait ndarray::SliceArg\">SliceArg</a>&lt;D&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a sliced read-write view of the array.</p>\n<p>See <a href=\"#slicing\"><em>Slicing</em></a> for full documentation.\nSee also <a href=\"ndarray/prelude/macro.s.html\" title=\"macro ndarray::prelude::s\"><code>s!</code></a>, <a href=\"ndarray/trait.SliceArg.html\" title=\"trait ndarray::SliceArg\"><code>SliceArg</code></a>, and <a href=\"ndarray/struct.SliceInfo.html\" title=\"struct ndarray::SliceInfo\"><code>SliceInfo</code></a>.</p>\n<p><strong>Panics</strong> if an index is out of bounds or step size is zero.<br>\n(<strong>Panics</strong> if <code>D</code> is <code>IxDyn</code> and <code>info</code> does not match the number of array axes.)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.multi_slice_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#505-511\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.multi_slice_mut\" class=\"fn\">multi_slice_mut</a>&lt;'a, M&gt;(&amp;'a mut self, info: M) -&gt; M::<a class=\"associatedtype\" href=\"ndarray/trait.MultiSliceArg.html#associatedtype.Output\" title=\"type ndarray::MultiSliceArg::Output\">Output</a><div class=\"where\">where\n    M: <a class=\"trait\" href=\"ndarray/trait.MultiSliceArg.html\" title=\"trait ndarray::MultiSliceArg\">MultiSliceArg</a>&lt;'a, A, D&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return multiple disjoint, sliced, mutable views of the array.</p>\n<p>See <a href=\"#slicing\"><em>Slicing</em></a> for full documentation. See also\n<a href=\"ndarray/trait.MultiSliceArg.html\" title=\"trait ndarray::MultiSliceArg\"><code>MultiSliceArg</code></a>, <a href=\"ndarray/prelude/macro.s.html\" title=\"macro ndarray::prelude::s\"><code>s!</code></a>, <a href=\"ndarray/trait.SliceArg.html\" title=\"trait ndarray::SliceArg\"><code>SliceArg</code></a>, and\n<a href=\"ndarray/struct.SliceInfo.html\" title=\"struct ndarray::SliceInfo\"><code>SliceInfo</code></a>.</p>\n<p><strong>Panics</strong> if any of the following occur:</p>\n<ul>\n<li>if any of the views would intersect (i.e. if any element would appear in multiple slices)</li>\n<li>if an index is out of bounds or step size is zero</li>\n<li>if <code>D</code> is <code>IxDyn</code> and <code>info</code> does not match the number of array axes</li>\n</ul>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{arr2, s};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]]);\n<span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>edges, <span class=\"kw-2\">mut </span>middle) = a.multi_slice_mut((<span class=\"macro\">s!</span>[.., ..;<span class=\"number\">2</span>], <span class=\"macro\">s!</span>[.., <span class=\"number\">1</span>]));\nedges.fill(<span class=\"number\">1</span>);\nmiddle.fill(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(a, arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_move\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#520-567\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice_move\" class=\"fn\">slice_move</a>&lt;I&gt;(self, info: I) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, I::<a class=\"associatedtype\" href=\"ndarray/trait.SliceArg.html#associatedtype.OutDim\" title=\"type ndarray::SliceArg::OutDim\">OutDim</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"ndarray/trait.SliceArg.html\" title=\"trait ndarray::SliceArg\">SliceArg</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Slice the array, possibly changing the number of dimensions.</p>\n<p>See <a href=\"#slicing\"><em>Slicing</em></a> for full documentation.\nSee also <a href=\"ndarray/prelude/macro.s.html\" title=\"macro ndarray::prelude::s\"><code>s!</code></a>, <a href=\"ndarray/trait.SliceArg.html\" title=\"trait ndarray::SliceArg\"><code>SliceArg</code></a>, and <a href=\"ndarray/struct.SliceInfo.html\" title=\"struct ndarray::SliceInfo\"><code>SliceInfo</code></a>.</p>\n<p><strong>Panics</strong> if an index is out of bounds or step size is zero.<br>\n(<strong>Panics</strong> if <code>D</code> is <code>IxDyn</code> and <code>info</code> does not match the number of array axes.)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_collapse\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#589-612\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice_collapse\" class=\"fn\">slice_collapse</a>&lt;I&gt;(&amp;mut self, info: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"ndarray/trait.SliceArg.html\" title=\"trait ndarray::SliceArg\">SliceArg</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Slice the array in place without changing the number of dimensions.</p>\n<p>In particular, if an axis is sliced with an index, the axis is\ncollapsed, as in <a href=\"ndarray/struct.ArrayBase.html#method.collapse_axis\" title=\"method ndarray::ArrayBase::collapse_axis\"><code>.collapse_axis()</code></a>, rather than removed, as in\n<a href=\"ndarray/struct.ArrayBase.html#method.slice_move\" title=\"method ndarray::ArrayBase::slice_move\"><code>.slice_move()</code></a> or <a href=\"ndarray/struct.ArrayBase.html#method.index_axis_move\" title=\"method ndarray::ArrayBase::index_axis_move\"><code>.index_axis_move()</code></a>.</p>\n<p>See <a href=\"#slicing\"><em>Slicing</em></a> for full documentation.\nSee also <a href=\"ndarray/prelude/macro.s.html\" title=\"macro ndarray::prelude::s\"><code>s!</code></a>, <a href=\"ndarray/trait.SliceArg.html\" title=\"trait ndarray::SliceArg\"><code>SliceArg</code></a>, and <a href=\"ndarray/struct.SliceInfo.html\" title=\"struct ndarray::SliceInfo\"><code>SliceInfo</code></a>.</p>\n<p><strong>Panics</strong> in the following cases:</p>\n<ul>\n<li>if an index is out of bounds</li>\n<li>if a step size is zero</li>\n<li>if <a href=\"ndarray/enum.SliceInfoElem.html#variant.NewAxis\" title=\"variant ndarray::SliceInfoElem::NewAxis\"><code>SliceInfoElem::NewAxis</code></a> is in <code>info</code>, e.g. if <a href=\"ndarray/struct.NewAxis.html\" title=\"struct ndarray::NewAxis\"><code>NewAxis</code></a> was\nused in the <a href=\"ndarray/prelude/macro.s.html\" title=\"macro ndarray::prelude::s\"><code>s!</code></a> macro</li>\n<li>if <code>D</code> is <code>IxDyn</code> and <code>info</code> does not match the number of array axes</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#619-626\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice_axis\" class=\"fn\">slice_axis</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, indices: <a class=\"struct\" href=\"ndarray/struct.Slice.html\" title=\"struct ndarray::Slice\">Slice</a>) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a view of the array, sliced along the specified axis.</p>\n<p><strong>Panics</strong> if an index is out of bounds or step size is zero.<br>\n<strong>Panics</strong> if <code>axis</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_axis_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#633-640\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice_axis_mut\" class=\"fn\">slice_axis_mut</a>(\n    &amp;mut self,\n    axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>,\n    indices: <a class=\"struct\" href=\"ndarray/struct.Slice.html\" title=\"struct ndarray::Slice\">Slice</a>,\n) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayViewMut.html\" title=\"type ndarray::ArrayViewMut\">ArrayViewMut</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable view of the array, sliced along the specified axis.</p>\n<p><strong>Panics</strong> if an index is out of bounds or step size is zero.<br>\n<strong>Panics</strong> if <code>axis</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_axis_inplace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#646-656\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice_axis_inplace\" class=\"fn\">slice_axis_inplace</a>(&amp;mut self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, indices: <a class=\"struct\" href=\"ndarray/struct.Slice.html\" title=\"struct ndarray::Slice\">Slice</a>)</h4></section></summary><div class=\"docblock\"><p>Slice the array in place along the specified axis.</p>\n<p><strong>Panics</strong> if an index is out of bounds or step size is zero.<br>\n<strong>Panics</strong> if <code>axis</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_each_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#665-673\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice_each_axis\" class=\"fn\">slice_each_axis</a>&lt;F&gt;(&amp;self, f: F) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"ndarray/struct.AxisDescription.html\" title=\"struct ndarray::AxisDescription\">AxisDescription</a>) -&gt; <a class=\"struct\" href=\"ndarray/struct.Slice.html\" title=\"struct ndarray::Slice\">Slice</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a view of a slice of the array, with a closure specifying the\nslice for each axis.</p>\n<p>This is especially useful for code which is generic over the\ndimensionality of the array.</p>\n<p><strong>Panics</strong> if an index is out of bounds or step size is zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_each_axis_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#682-690\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice_each_axis_mut\" class=\"fn\">slice_each_axis_mut</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayViewMut.html\" title=\"type ndarray::ArrayViewMut\">ArrayViewMut</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"ndarray/struct.AxisDescription.html\" title=\"struct ndarray::AxisDescription\">AxisDescription</a>) -&gt; <a class=\"struct\" href=\"ndarray/struct.Slice.html\" title=\"struct ndarray::Slice\">Slice</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable view of a slice of the array, with a closure\nspecifying the slice for each axis.</p>\n<p>This is especially useful for code which is generic over the\ndimensionality of the array.</p>\n<p><strong>Panics</strong> if an index is out of bounds or step size is zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_each_axis_inplace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#699-713\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.slice_each_axis_inplace\" class=\"fn\">slice_each_axis_inplace</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"struct\" href=\"ndarray/struct.AxisDescription.html\" title=\"struct ndarray::AxisDescription\">AxisDescription</a>) -&gt; <a class=\"struct\" href=\"ndarray/struct.Slice.html\" title=\"struct ndarray::Slice\">Slice</a>,</div></h4></section></summary><div class=\"docblock\"><p>Slice the array in place, with a closure specifying the slice for each\naxis.</p>\n<p>This is especially useful for code which is generic over the\ndimensionality of the array.</p>\n<p><strong>Panics</strong> if an index is out of bounds or step size is zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#733-739\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.get\" class=\"fn\">get</a>&lt;I&gt;(&amp;self, index: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;A</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Return a reference to the element at <code>index</code>, or return <code>None</code>\nif the index is out of bounds.</p>\n<p>Arrays also support indexing syntax: <code>array[index]</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n               [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]]);\n\n<span class=\"macro\">assert!</span>(\n    a.get((<span class=\"number\">0</span>, <span class=\"number\">1</span>)) == <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2.</span>) &amp;&amp;\n    a.get((<span class=\"number\">0</span>, <span class=\"number\">2</span>)) == <span class=\"prelude-val\">None </span>&amp;&amp;\n    a[(<span class=\"number\">0</span>, <span class=\"number\">1</span>)] == <span class=\"number\">2. </span>&amp;&amp;\n    a[[<span class=\"number\">0</span>, <span class=\"number\">1</span>]] == <span class=\"number\">2.\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#754-762\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.get_ptr\" class=\"fn\">get_ptr</a>&lt;I&gt;(&amp;self, index: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*const A</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Return a raw pointer to the element at <code>index</code>, or return <code>None</code>\nif the index is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]]);\n\n<span class=\"kw\">let </span>v = a.raw_view();\n<span class=\"kw\">let </span>p = a.get_ptr((<span class=\"number\">0</span>, <span class=\"number\">1</span>)).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>p }, <span class=\"number\">2.</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#766-772\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;I&gt;(&amp;mut self, index: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut A</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable reference to the element at <code>index</code>, or return <code>None</code>\nif the index is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#791-802\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.get_mut_ptr\" class=\"fn\">get_mut_ptr</a>&lt;I&gt;(&amp;mut self, index: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*mut A</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.RawDataMut.html\" title=\"trait ndarray::RawDataMut\">RawDataMut</a>,\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Return a raw pointer to the element at <code>index</code>, or return <code>None</code>\nif the index is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]]);\n\n<span class=\"kw\">let </span>v = a.raw_view_mut();\n<span class=\"kw\">let </span>p = a.get_mut_ptr((<span class=\"number\">0</span>, <span class=\"number\">1</span>)).unwrap();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw-2\">*</span>p = <span class=\"number\">5.</span>;\n}\n\n<span class=\"macro\">assert_eq!</span>(a.get((<span class=\"number\">0</span>, <span class=\"number\">1</span>)), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">5.</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uget\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#814-822\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.uget\" class=\"fn\">uget</a>&lt;I&gt;(&amp;self, index: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;A</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Perform <em>unchecked</em> array indexing.</p>\n<p>Return a reference to the element at <code>index</code>.</p>\n<p><strong>Note:</strong> only unchecked for non-debug builds of ndarray.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The caller must ensure that the index is in-bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uget_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#839-848\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.uget_mut\" class=\"fn\">uget_mut</a>&lt;I&gt;(&amp;mut self, index: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut A</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Perform <em>unchecked</em> array indexing.</p>\n<p>Return a mutable reference to the element at <code>index</code>.</p>\n<p><strong>Note:</strong> Only unchecked for non-debug builds of ndarray.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The caller must ensure that:</p>\n<ol>\n<li>\n<p>the index is in-bounds and</p>\n</li>\n<li>\n<p>the data is uniquely held by the array. (This property is guaranteed\nfor <code>Array</code> and <code>ArrayViewMut</code>, but not for <code>ArcArray</code> or <code>CowArray</code>.)</p>\n</li>\n</ol>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#855-872\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.swap\" class=\"fn\">swap</a>&lt;I&gt;(&amp;mut self, index1: I, index2: I)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Swap elements at indices <code>index1</code> and <code>index2</code>.</p>\n<p>Indices may be equal.</p>\n<p><em><strong>Panics</strong></em> if an index is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.uswap\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#888-902\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.uswap\" class=\"fn\">uswap</a>&lt;I&gt;(&amp;mut self, index1: I, index2: I)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Swap elements <em>unchecked</em> at indices <code>index1</code> and <code>index2</code>.</p>\n<p>Indices may be equal.</p>\n<p><strong>Note:</strong> only unchecked for non-debug builds of ndarray.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>The caller must ensure that:</p>\n<ol>\n<li>\n<p>both <code>index1</code> and <code>index2</code> are in-bounds and</p>\n</li>\n<li>\n<p>the data is uniquely held by the array. (This property is guaranteed\nfor <code>Array</code> and <code>ArrayViewMut</code>, but not for <code>ArcArray</code> or <code>CowArray</code>.)</p>\n</li>\n</ol>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#935-941\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.index_axis\" class=\"fn\">index_axis</a>(\n    &amp;self,\n    axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a view restricted to <code>index</code> along the axis, with the axis\nremoved.</p>\n<p>See <a href=\"#subviews\"><em>Subviews</em></a> for full documentation.</p>\n<p><strong>Panics</strong> if <code>axis</code> or <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{arr2, ArrayView, Axis};\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2. </span>],    <span class=\"comment\">// ... axis 0, row 0\n               </span>[<span class=\"number\">3.</span>, <span class=\"number\">4. </span>],    <span class=\"comment\">// --- axis 0, row 1\n               </span>[<span class=\"number\">5.</span>, <span class=\"number\">6. </span>]]);  <span class=\"comment\">// ... axis 0, row 2\n//               .   \\\n//                .   axis 1, column 1\n//                 axis 1, column 0\n</span><span class=\"macro\">assert!</span>(\n    a.index_axis(Axis(<span class=\"number\">0</span>), <span class=\"number\">1</span>) == ArrayView::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]) &amp;&amp;\n    a.index_axis(Axis(<span class=\"number\">1</span>), <span class=\"number\">1</span>) == ArrayView::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2.</span>, <span class=\"number\">4.</span>, <span class=\"number\">6.</span>])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_axis_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#967-973\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.index_axis_mut\" class=\"fn\">index_axis_mut</a>(\n    &amp;mut self,\n    axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayViewMut.html\" title=\"type ndarray::ArrayViewMut\">ArrayViewMut</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable view restricted to <code>index</code> along the axis, with the\naxis removed.</p>\n<p><strong>Panics</strong> if <code>axis</code> or <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{arr2, aview2, Axis};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2. </span>],\n                   [<span class=\"number\">3.</span>, <span class=\"number\">4. </span>]]);\n<span class=\"comment\">//                   .   \\\n//                    .   axis 1, column 1\n//                     axis 1, column 0\n\n</span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>column1 = a.index_axis_mut(Axis(<span class=\"number\">1</span>), <span class=\"number\">1</span>);\n    column1 += <span class=\"number\">10.</span>;\n}\n\n<span class=\"macro\">assert!</span>(\n    a == aview2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">12.</span>],\n                  [<span class=\"number\">3.</span>, <span class=\"number\">14.</span>]])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_axis_move\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#980-991\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.index_axis_move\" class=\"fn\">index_axis_move</a>(\n    self,\n    axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>,\n    index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Collapses the array to <code>index</code> along the axis and removes the axis.</p>\n<p>See <a href=\"ndarray/struct.ArrayBase.html#method.index_axis\" title=\"method ndarray::ArrayBase::index_axis\"><code>.index_axis()</code></a> and <a href=\"#subviews\"><em>Subviews</em></a> for full documentation.</p>\n<p><strong>Panics</strong> if <code>axis</code> or <code>index</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collapse_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#996-1000\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.collapse_axis\" class=\"fn\">collapse_axis</a>(&amp;mut self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Selects <code>index</code> along the axis, collapsing the axis into length one.</p>\n<p><strong>Panics</strong> if <code>axis</code> or <code>index</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.select\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1023-1059\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.select\" class=\"fn\">select</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, indices: &amp;[<a class=\"type\" href=\"ndarray/type.Ix.html\" title=\"type ndarray::Ix\">Ix</a>]) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Along <code>axis</code>, select arbitrary subviews corresponding to <code>indices</code>\nand and copy them into a new array.</p>\n<p><strong>Panics</strong> if <code>axis</code> or an element of <code>indices</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{arr2, Axis};\n\n<span class=\"kw\">let </span>x = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">0.</span>, <span class=\"number\">1.</span>],\n               [<span class=\"number\">2.</span>, <span class=\"number\">3.</span>],\n               [<span class=\"number\">4.</span>, <span class=\"number\">5.</span>],\n               [<span class=\"number\">6.</span>, <span class=\"number\">7.</span>],\n               [<span class=\"number\">8.</span>, <span class=\"number\">9.</span>]]);\n\n<span class=\"kw\">let </span>r = x.select(Axis(<span class=\"number\">0</span>), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(\n        r == arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">0.</span>, <span class=\"number\">1.</span>],\n                    [<span class=\"number\">8.</span>, <span class=\"number\">9.</span>],\n                    [<span class=\"number\">6.</span>, <span class=\"number\">7.</span>]])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rows\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1087-1096\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.rows\" class=\"fn\">rows</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.Lanes.html\" title=\"struct ndarray::iter::Lanes\">Lanes</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a producer and iterable that traverses over the <em>generalized</em>\nrows of the array. For a 2D array these are the regular rows.</p>\n<p>This is equivalent to <code>.lanes(Axis(n - 1))</code> where <em>n</em> is <code>self.ndim()</code>.</p>\n<p>For an array of dimensions <em>a</em> × <em>b</em> × <em>c</em> × … × <em>l</em> × <em>m</em>\nit has <em>a</em> × <em>b</em> × <em>c</em> × … × <em>l</em> rows each of length <em>m</em>.</p>\n<p>For example, in a 2 × 2 × 3 array, each row is 3 elements long\nand there are 2 × 2 = 4 rows in total.</p>\n<p>Iterator element is <code>ArrayView1&lt;A&gt;</code> (1D array view).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr3;\n\n<span class=\"kw\">let </span>a = arr3(<span class=\"kw-2\">&amp;</span>[[[ <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>],    <span class=\"comment\">// -- row 0, 0\n                </span>[ <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>]],   <span class=\"comment\">// -- row 0, 1\n               </span>[[ <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>],    <span class=\"comment\">// -- row 1, 0\n                </span>[ <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>]]]); <span class=\"comment\">// -- row 1, 1\n\n// `rows` will yield the four generalized rows of the array.\n</span><span class=\"kw\">for </span>row <span class=\"kw\">in </span>a.rows() {\n    <span class=\"comment\">/* loop body */\n</span>}</code></pre></div>\n</div></details><section id=\"method.genrows\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1099-1104\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.genrows\" class=\"fn\">genrows</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.Lanes.html\" title=\"struct ndarray::iter::Lanes\">Lanes</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Renamed to .rows()</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.rows_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1110-1119\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.rows_mut\" class=\"fn\">rows_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.LanesMut.html\" title=\"struct ndarray::iter::LanesMut\">LanesMut</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a producer and iterable that traverses over the <em>generalized</em>\nrows of the array and yields mutable array views.</p>\n<p>Iterator element is <code>ArrayView1&lt;A&gt;</code> (1D read-write array view).</p>\n</div></details><section id=\"method.genrows_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1122-1127\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.genrows_mut\" class=\"fn\">genrows_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.LanesMut.html\" title=\"struct ndarray::iter::LanesMut\">LanesMut</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Renamed to .rows_mut()</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.columns\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1155-1160\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.columns\" class=\"fn\">columns</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.Lanes.html\" title=\"struct ndarray::iter::Lanes\">Lanes</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a producer and iterable that traverses over the <em>generalized</em>\ncolumns of the array. For a 2D array these are the regular columns.</p>\n<p>This is equivalent to <code>.lanes(Axis(0))</code>.</p>\n<p>For an array of dimensions <em>a</em> × <em>b</em> × <em>c</em> × … × <em>l</em> × <em>m</em>\nit has <em>b</em> × <em>c</em> × … × <em>l</em> × <em>m</em> columns each of length <em>a</em>.</p>\n<p>For example, in a 2 × 2 × 3 array, each column is 2 elements long\nand there are 2 × 3 = 6 columns in total.</p>\n<p>Iterator element is <code>ArrayView1&lt;A&gt;</code> (1D array view).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr3;\n\n<span class=\"comment\">// The generalized columns of a 3D array:\n// are directed along the 0th axis: 0 and 6, 1 and 7 and so on...\n</span><span class=\"kw\">let </span>a = arr3(<span class=\"kw-2\">&amp;</span>[[[ <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>], [ <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>]],\n               [[ <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>], [ <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>]]]);\n\n<span class=\"comment\">// Here `columns` will yield the six generalized columns of the array.\n</span><span class=\"kw\">for </span>row <span class=\"kw\">in </span>a.columns() {\n    <span class=\"comment\">/* loop body */\n</span>}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gencolumns\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1167-1172\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.gencolumns\" class=\"fn\">gencolumns</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.Lanes.html\" title=\"struct ndarray::iter::Lanes\">Lanes</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Renamed to .columns()</span></div></span></summary><div class=\"docblock\"><p>Return a producer and iterable that traverses over the <em>generalized</em>\ncolumns of the array. For a 2D array these are the regular columns.</p>\n<p>Renamed to <code>.columns()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.columns_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1178-1183\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.columns_mut\" class=\"fn\">columns_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.LanesMut.html\" title=\"struct ndarray::iter::LanesMut\">LanesMut</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a producer and iterable that traverses over the <em>generalized</em>\ncolumns of the array and yields mutable array views.</p>\n<p>Iterator element is <code>ArrayView1&lt;A&gt;</code> (1D read-write array view).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gencolumns_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1190-1195\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.gencolumns_mut\" class=\"fn\">gencolumns_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.LanesMut.html\" title=\"struct ndarray::iter::LanesMut\">LanesMut</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Renamed to .columns_mut()</span></div></span></summary><div class=\"docblock\"><p>Return a producer and iterable that traverses over the <em>generalized</em>\ncolumns of the array and yields mutable array views.</p>\n<p>Renamed to <code>.columns_mut()</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lanes\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1225-1230\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.lanes\" class=\"fn\">lanes</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.Lanes.html\" title=\"struct ndarray::iter::Lanes\">Lanes</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a producer and iterable that traverses over all 1D lanes\npointing in the direction of <code>axis</code>.</p>\n<p>When pointing in the direction of the first axis, they are <em>columns</em>,\nin the direction of the last axis <em>rows</em>; in general they are all\n<em>lanes</em> and are one dimensional.</p>\n<p>Iterator element is <code>ArrayView1&lt;A&gt;</code> (1D array view).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{arr3, aview1, Axis};\n\n<span class=\"kw\">let </span>a = arr3(<span class=\"kw-2\">&amp;</span>[[[ <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>],\n                [ <span class=\"number\">3</span>,  <span class=\"number\">4</span>,  <span class=\"number\">5</span>]],\n               [[ <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>],\n                [ <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>]]]);\n\n<span class=\"kw\">let </span>inner0 = a.lanes(Axis(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>inner1 = a.lanes(Axis(<span class=\"number\">1</span>));\n<span class=\"kw\">let </span>inner2 = a.lanes(Axis(<span class=\"number\">2</span>));\n\n<span class=\"comment\">// The first lane for axis 0 is [0, 6]\n</span><span class=\"macro\">assert_eq!</span>(inner0.into_iter().next().unwrap(), aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">6</span>]));\n<span class=\"comment\">// The first lane for axis 1 is [0, 3]\n</span><span class=\"macro\">assert_eq!</span>(inner1.into_iter().next().unwrap(), aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">3</span>]));\n<span class=\"comment\">// The first lane for axis 2 is [0, 1, 2]\n</span><span class=\"macro\">assert_eq!</span>(inner2.into_iter().next().unwrap(), aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lanes_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1236-1241\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.lanes_mut\" class=\"fn\">lanes_mut</a>(&amp;mut self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.LanesMut.html\" title=\"struct ndarray::iter::LanesMut\">LanesMut</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a producer and iterable that traverses over all 1D lanes\npointing in the direction of <code>axis</code>.</p>\n<p>Iterator element is <code>ArrayViewMut1&lt;A&gt;</code> (1D read-write array view).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.outer_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1250-1256\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.outer_iter\" class=\"fn\">outer_iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.AxisIter.html\" title=\"struct ndarray::iter::AxisIter\">AxisIter</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"AxisIter&lt;&#39;_, A, D::Smaller&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator that traverses over the outermost dimension\nand yields each subview.</p>\n<p>This is equivalent to <code>.axis_iter(Axis(0))</code>.</p>\n<p>Iterator element is <code>ArrayView&lt;A, D::Smaller&gt;</code> (read-only array view).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.outer_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1265-1271\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.outer_iter_mut\" class=\"fn\">outer_iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.AxisIterMut.html\" title=\"struct ndarray::iter::AxisIterMut\">AxisIterMut</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"AxisIterMut&lt;&#39;_, A, D::Smaller&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator that traverses over the outermost dimension\nand yields each subview.</p>\n<p>This is equivalent to <code>.axis_iter_mut(Axis(0))</code>.</p>\n<p>Iterator element is <code>ArrayViewMut&lt;A, D::Smaller&gt;</code> (read-write array view).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.axis_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1288-1294\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.axis_iter\" class=\"fn\">axis_iter</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.AxisIter.html\" title=\"struct ndarray::iter::AxisIter\">AxisIter</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"AxisIter&lt;&#39;_, A, D::Smaller&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator that traverses over <code>axis</code>\nand yields each subview along it.</p>\n<p>For example, in a 3 × 4 × 5 array, with <code>axis</code> equal to <code>Axis(2)</code>,\nthe iterator element\nis a 3 × 4 subview (and there are 5 in total), as shown\nin the picture below.</p>\n<p>Iterator element is <code>ArrayView&lt;A, D::Smaller&gt;</code> (read-only array view).</p>\n<p>See <a href=\"#subviews\"><em>Subviews</em></a> for full documentation.</p>\n<p><strong>Panics</strong> if <code>axis</code> is out of bounds.</p>\n<img src=\"https://rust-ndarray.github.io/ndarray/images/axis_iter_3_4_5.svg\" height=\"250px\"></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.axis_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1303-1309\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.axis_iter_mut\" class=\"fn\">axis_iter_mut</a>(&amp;mut self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.AxisIterMut.html\" title=\"struct ndarray::iter::AxisIterMut\">AxisIterMut</a>&lt;'_, A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"AxisIterMut&lt;&#39;_, A, D::Smaller&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator that traverses over <code>axis</code>\nand yields each mutable subview along it.</p>\n<p>Iterator element is <code>ArrayViewMut&lt;A, D::Smaller&gt;</code>\n(read-write array view).</p>\n<p><strong>Panics</strong> if <code>axis</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.axis_chunks_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1337-1342\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.axis_chunks_iter\" class=\"fn\">axis_chunks_iter</a>(\n    &amp;self,\n    axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.AxisChunksIter.html\" title=\"struct ndarray::iter::AxisChunksIter\">AxisChunksIter</a>&lt;'_, A, D&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"AxisChunksIter&lt;&#39;_, A, D&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator that traverses over <code>axis</code> by chunks of <code>size</code>,\nyielding non-overlapping views along that axis.</p>\n<p>Iterator element is <code>ArrayView&lt;A, D&gt;</code></p>\n<p>The last view may have less elements if <code>size</code> does not divide\nthe axis’ dimension.</p>\n<p><strong>Panics</strong> if <code>axis</code> is out of bounds or if <code>size</code> is zero.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array;\n<span class=\"kw\">use </span>ndarray::{arr3, Axis};\n\n<span class=\"kw\">let </span>a = Array::from_iter(<span class=\"number\">0</span>..<span class=\"number\">28</span>).into_shape((<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>)).unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = a.axis_chunks_iter(Axis(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n\n<span class=\"comment\">// first iteration yields a 2 × 2 × 2 view\n</span><span class=\"macro\">assert_eq!</span>(iter.next().unwrap(),\n           arr3(<span class=\"kw-2\">&amp;</span>[[[ <span class=\"number\">0</span>,  <span class=\"number\">1</span>], [ <span class=\"number\">2</span>, <span class=\"number\">3</span>]],\n                  [[<span class=\"number\">14</span>, <span class=\"number\">15</span>], [<span class=\"number\">16</span>, <span class=\"number\">17</span>]]]));\n\n<span class=\"comment\">// however the last element is a 2 × 1 × 2 view since 7 % 2 == 1\n</span><span class=\"macro\">assert_eq!</span>(iter.next_back().unwrap(), arr3(<span class=\"kw-2\">&amp;</span>[[[<span class=\"number\">12</span>, <span class=\"number\">13</span>]],\n                                             [[<span class=\"number\">26</span>, <span class=\"number\">27</span>]]]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.axis_chunks_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1350-1355\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.axis_chunks_iter_mut\" class=\"fn\">axis_chunks_iter_mut</a>(\n    &amp;mut self,\n    axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.AxisChunksIterMut.html\" title=\"struct ndarray::iter::AxisChunksIterMut\">AxisChunksIterMut</a>&lt;'_, A, D&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"AxisChunksIterMut&lt;&#39;_, A, D&gt;\">ⓘ</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an iterator that traverses over <code>axis</code> by chunks of <code>size</code>,\nyielding non-overlapping read-write views along that axis.</p>\n<p>Iterator element is <code>ArrayViewMut&lt;A, D&gt;</code></p>\n<p><strong>Panics</strong> if <code>axis</code> is out of bounds or if <code>size</code> is zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exact_chunks\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1368-1374\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.exact_chunks\" class=\"fn\">exact_chunks</a>&lt;E&gt;(&amp;self, chunk_size: E) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.ExactChunks.html\" title=\"struct ndarray::iter::ExactChunks\">ExactChunks</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"ndarray/trait.IntoDimension.html\" title=\"trait ndarray::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an exact chunks producer (and iterable).</p>\n<p>It produces the whole chunks of a given n-dimensional chunk size,\nskipping the remainder along each dimension that doesn’t fit evenly.</p>\n<p>The produced element is a <code>ArrayView&lt;A, D&gt;</code> with exactly the dimension\n<code>chunk_size</code>.</p>\n<p><strong>Panics</strong> if any dimension of <code>chunk_size</code> is zero<br>\n(<strong>Panics</strong> if <code>D</code> is <code>IxDyn</code> and <code>chunk_size</code> does not match the\nnumber of array axes.)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exact_chunks_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1408-1414\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.exact_chunks_mut\" class=\"fn\">exact_chunks_mut</a>&lt;E&gt;(&amp;mut self, chunk_size: E) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.ExactChunksMut.html\" title=\"struct ndarray::iter::ExactChunksMut\">ExactChunksMut</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"ndarray/trait.IntoDimension.html\" title=\"trait ndarray::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an exact chunks producer (and iterable).</p>\n<p>It produces the whole chunks of a given n-dimensional chunk size,\nskipping the remainder along each dimension that doesn’t fit evenly.</p>\n<p>The produced element is a <code>ArrayViewMut&lt;A, D&gt;</code> with exactly\nthe dimension <code>chunk_size</code>.</p>\n<p><strong>Panics</strong> if any dimension of <code>chunk_size</code> is zero<br>\n(<strong>Panics</strong> if <code>D</code> is <code>IxDyn</code> and <code>chunk_size</code> does not match the\nnumber of array axes.)</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array;\n<span class=\"kw\">use </span>ndarray::arr2;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = Array::zeros((<span class=\"number\">6</span>, <span class=\"number\">7</span>));\n\n<span class=\"comment\">// Fill each 2 × 2 chunk with the index of where it appeared in iteration\n</span><span class=\"kw\">for </span>(i, <span class=\"kw-2\">mut </span>chunk) <span class=\"kw\">in </span>a.exact_chunks_mut((<span class=\"number\">2</span>, <span class=\"number\">2</span>)).into_iter().enumerate() {\n    chunk.fill(i);\n}\n\n<span class=\"comment\">// The resulting array is:\n</span><span class=\"macro\">assert_eq!</span>(\n  a,\n  arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>],\n         [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>],\n         [<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>],\n         [<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>],\n         [<span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>],\n         [<span class=\"number\">6</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>]]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.windows\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1452-1458\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.windows\" class=\"fn\">windows</a>&lt;E&gt;(&amp;self, window_size: E) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.Windows.html\" title=\"struct ndarray::iter::Windows\">Windows</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"ndarray/trait.IntoDimension.html\" title=\"trait ndarray::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a window producer and iterable.</p>\n<p>The windows are all distinct overlapping views of size <code>window_size</code>\nthat fit into the array’s shape.</p>\n<p>This produces no elements if the window size is larger than the actual array size along any\naxis.</p>\n<p>The produced element is an <code>ArrayView&lt;A, D&gt;</code> with exactly the dimension\n<code>window_size</code>.</p>\n<p><strong>Panics</strong> if any dimension of <code>window_size</code> is zero.<br>\n(<strong>Panics</strong> if <code>D</code> is <code>IxDyn</code> and <code>window_size</code> does not match the\nnumber of array axes.)</p>\n<p>This is an illustration of the 2×2 windows in a 3×4 array:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>         ──▶ Axis(1)\n\n     │   ┏━━━━━┳━━━━━┱─────┬─────┐   ┌─────┲━━━━━┳━━━━━┱─────┐   ┌─────┬─────┲━━━━━┳━━━━━┓\n     ▼   ┃ a₀₀ ┃ a₀₁ ┃     │     │   │     ┃ a₀₁ ┃ a₀₂ ┃     │   │     │     ┃ a₀₂ ┃ a₀₃ ┃\nAxis(0)  ┣━━━━━╋━━━━━╉─────┼─────┤   ├─────╊━━━━━╋━━━━━╉─────┤   ├─────┼─────╊━━━━━╋━━━━━┫\n         ┃ a₁₀ ┃ a₁₁ ┃     │     │   │     ┃ a₁₁ ┃ a₁₂ ┃     │   │     │     ┃ a₁₂ ┃ a₁₃ ┃\n         ┡━━━━━╇━━━━━╃─────┼─────┤   ├─────╄━━━━━╇━━━━━╃─────┤   ├─────┼─────╄━━━━━╇━━━━━┩\n         │     │     │     │     │   │     │     │     │     │   │     │     │     │     │\n         └─────┴─────┴─────┴─────┘   └─────┴─────┴─────┴─────┘   └─────┴─────┴─────┴─────┘\n\n         ┌─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┐   ┌─────┬─────┬─────┬─────┐\n         │     │     │     │     │   │     │     │     │     │   │     │     │     │     │\n         ┢━━━━━╈━━━━━╅─────┼─────┤   ├─────╆━━━━━╈━━━━━╅─────┤   ├─────┼─────╆━━━━━╈━━━━━┪\n         ┃ a₁₀ ┃ a₁₁ ┃     │     │   │     ┃ a₁₁ ┃ a₁₂ ┃     │   │     │     ┃ a₁₂ ┃ a₁₃ ┃\n         ┣━━━━━╋━━━━━╉─────┼─────┤   ├─────╊━━━━━╋━━━━━╉─────┤   ├─────┼─────╊━━━━━╋━━━━━┫\n         ┃ a₂₀ ┃ a₂₁ ┃     │     │   │     ┃ a₂₁ ┃ a₂₂ ┃     │   │     │     ┃ a₂₂ ┃ a₂₃ ┃\n         ┗━━━━━┻━━━━━┹─────┴─────┘   └─────┺━━━━━┻━━━━━┹─────┘   └─────┴─────┺━━━━━┻━━━━━┛\n</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.axis_windows\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1481-1502\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.axis_windows\" class=\"fn\">axis_windows</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, window_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.Windows.html\" title=\"struct ndarray::iter::Windows\">Windows</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a producer which traverses over all windows of a given length along an axis.</p>\n<p>The windows are all distinct, possibly-overlapping views. The shape of each window\nis the shape of <code>self</code>, with the length of <code>axis</code> replaced with <code>window_size</code>.</p>\n<p><strong>Panics</strong> if <code>axis</code> is out-of-bounds or if <code>window_size</code> is zero.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Array3, Axis, s};\n\n<span class=\"kw\">let </span>arr = Array3::from_shape_fn([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>], |(i, j, k)| i * <span class=\"number\">100 </span>+ j * <span class=\"number\">10 </span>+ k);\n<span class=\"kw\">let </span>correct = <span class=\"macro\">vec!</span>[\n    arr.slice(<span class=\"macro\">s!</span>[.., <span class=\"number\">0</span>..<span class=\"number\">3</span>, ..]),\n    arr.slice(<span class=\"macro\">s!</span>[.., <span class=\"number\">1</span>..<span class=\"number\">4</span>, ..]),\n    arr.slice(<span class=\"macro\">s!</span>[.., <span class=\"number\">2</span>..<span class=\"number\">5</span>, ..]),\n];\n<span class=\"kw\">for </span>(window, correct) <span class=\"kw\">in </span>arr.axis_windows(Axis(<span class=\"number\">1</span>), <span class=\"number\">3</span>).into_iter().zip(<span class=\"kw-2\">&amp;</span>correct) {\n    <span class=\"macro\">assert_eq!</span>(window, correct);\n    <span class=\"macro\">assert_eq!</span>(window.shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.diag\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1516-1521\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.diag\" class=\"fn\">diag</a>(&amp;self) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView1.html\" title=\"type ndarray::ArrayView1\">ArrayView1</a>&lt;'_, A&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a view of the diagonal elements of the array.</p>\n<p>The diagonal is simply the sequence indexed by <em>(0, 0, .., 0)</em>,\n<em>(1, 1, …, 1)</em> etc as long as all axes have elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.diag_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1524-1529\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.diag_mut\" class=\"fn\">diag_mut</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayViewMut1.html\" title=\"type ndarray::ArrayViewMut1\">ArrayViewMut1</a>&lt;'_, A&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a read-write view over the diagonal elements of the array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_diag\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1532-1538\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.into_diag\" class=\"fn\">into_diag</a>(self) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return the diagonal as a one-dimensional array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_standard_layout\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1571-1573\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.is_standard_layout\" class=\"fn\">is_standard_layout</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return <code>true</code> if the array data is laid out in contiguous “C order” in\nmemory (where the last index is the most rapidly varying).</p>\n<p>Return <code>false</code> otherwise, i.e. the array is possibly not\ncontiguous in memory, it has custom strides, etc.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_standard_layout\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1602-1620\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.as_standard_layout\" class=\"fn\">as_standard_layout</a>(&amp;self) -&gt; <a class=\"type\" href=\"ndarray/type.CowArray.html\" title=\"type ndarray::CowArray\">CowArray</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a standard-layout array containing the data, cloning if\nnecessary.</p>\n<p>If <code>self</code> is in standard layout, a COW view of the data is returned\nwithout cloning. Otherwise, the data is cloned, and the returned array\nowns the cloned data.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array2;\n\n<span class=\"kw\">let </span>standard = Array2::&lt;f64&gt;::zeros((<span class=\"number\">3</span>, <span class=\"number\">4</span>));\n<span class=\"macro\">assert!</span>(standard.is_standard_layout());\n<span class=\"kw\">let </span>cow_view = standard.as_standard_layout();\n<span class=\"macro\">assert!</span>(cow_view.is_view());\n<span class=\"macro\">assert!</span>(cow_view.is_standard_layout());\n\n<span class=\"kw\">let </span>fortran = standard.reversed_axes();\n<span class=\"macro\">assert!</span>(!fortran.is_standard_layout());\n<span class=\"kw\">let </span>cow_owned = fortran.as_standard_layout();\n<span class=\"macro\">assert!</span>(cow_owned.is_owned());\n<span class=\"macro\">assert!</span>(cow_owned.is_standard_layout());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1632-1634\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*const A</a></h4></section></summary><div class=\"docblock\"><p>Return a pointer to the first element in the array.</p>\n<p>Raw access to array elements needs to follow the strided indexing\nscheme: an element at multi-index <em>I</em> in an array with strides <em>S</em> is\nlocated at offset</p>\n<p><em>Σ<sub>0 ≤ k &lt; d</sub> I<sub>k</sub> × S<sub>k</sub></em></p>\n<p>where <em>d</em> is <code>self.ndim()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1647-1653\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.pointer.html\">*mut A</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.RawDataMut.html\" title=\"trait ndarray::RawDataMut\">RawDataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable pointer to the first element in the array.</p>\n<p>This method attempts to unshare the data. If <code>S: DataMut</code>, then the\ndata is guaranteed to be uniquely held on return.</p>\n<h5 id=\"warning\"><a class=\"doc-anchor\" href=\"#warning\">§</a>Warning</h5>\n<p>When accessing elements through this pointer, make sure to use strides\nobtained <em>after</em> calling this method, since the process of unsharing\nthe data may change the strides.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_view\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1657-1659\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.raw_view\" class=\"fn\">raw_view</a>(&amp;self) -&gt; <a class=\"type\" href=\"ndarray/type.RawArrayView.html\" title=\"type ndarray::RawArrayView\">RawArrayView</a>&lt;A, D&gt;</h4></section></summary><div class=\"docblock\"><p>Return a raw view of the array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_view_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1666-1672\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.raw_view_mut\" class=\"fn\">raw_view_mut</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"ndarray/type.RawArrayViewMut.html\" title=\"type ndarray::RawArrayViewMut\">RawArrayViewMut</a>&lt;A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.RawDataMut.html\" title=\"trait ndarray::RawDataMut\">RawDataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a raw mutable view of the array.</p>\n<p>This method attempts to unshare the data. If <code>S: DataMut</code>, then the\ndata is guaranteed to be uniquely held on return.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1690-1699\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return the array’s data as a slice, if it is contiguous and in standard order.\nReturn <code>None</code> otherwise.</p>\n<p>If this function returns <code>Some(_)</code>, then the element order in the slice\ncorresponds to the logical order of the array’s elements.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1703-1713\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.as_slice_mut\" class=\"fn\">as_slice_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return the array’s data as a slice, if it is contiguous and in standard order.\nReturn <code>None</code> otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice_memory_order\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1720-1735\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.as_slice_memory_order\" class=\"fn\">as_slice_memory_order</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return the array’s data as a slice if it is contiguous,\nreturn <code>None</code> otherwise.</p>\n<p>If this function returns <code>Some(_)</code>, then the elements in the slice\nhave whatever order the elements have in memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice_memory_order_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1743-1748\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.as_slice_memory_order_mut\" class=\"fn\">as_slice_memory_order_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return the array’s data as a slice if it is contiguous,\nreturn <code>None</code> otherwise.</p>\n<p>In the contiguous case, in order to return a unique reference, this\nmethod unshares the data if necessary, but it preserves the existing\nstrides.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_shape\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1814-1822\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.to_shape\" class=\"fn\">to_shape</a>&lt;E&gt;(\n    &amp;self,\n    new_shape: E,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"type\" href=\"ndarray/type.CowArray.html\" title=\"type ndarray::CowArray\">CowArray</a>&lt;'_, A, E::<a class=\"associatedtype\" href=\"ndarray/trait.ShapeArg.html#associatedtype.Dim\" title=\"type ndarray::ShapeArg::Dim\">Dim</a>&gt;, <a class=\"struct\" href=\"ndarray/struct.ShapeError.html\" title=\"struct ndarray::ShapeError\">ShapeError</a>&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"ndarray/trait.ShapeArg.html\" title=\"trait ndarray::ShapeArg\">ShapeArg</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Transform the array into <code>new_shape</code>; any shape with the same number of elements is\naccepted.</p>\n<p><code>order</code> specifies the <em>logical</em> order in which the array is to be read and reshaped.\nThe array is returned as a <code>CowArray</code>; a view if possible, otherwise an owned array.</p>\n<p>For example, when starting from the one-dimensional sequence 1 2 3 4 5 6, it would be\nunderstood as a 2 x 3 array in row major (“C”) order this way:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>1 2 3\n4 5 6\n</code></pre></div>\n<p>and as 2 x 3 in column major (“F”) order this way:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>1 3 5\n2 4 6\n</code></pre></div>\n<p>This example should show that any time we “reflow” the elements in the array to a different\nnumber of rows and columns (or more axes if applicable), it is important to pick an index\nordering, and that’s the reason for the function parameter for <code>order</code>.</p>\n<p><strong>Errors</strong> if the new shape doesn’t have the same number of elements as the array’s current\nshape.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>ndarray::Order;\n\n<span class=\"macro\">assert!</span>(\n    <span class=\"macro\">array!</span>[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>].to_shape(((<span class=\"number\">2</span>, <span class=\"number\">3</span>), Order::RowMajor)).unwrap()\n    == <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>],\n              [<span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>]]\n);\n\n<span class=\"macro\">assert!</span>(\n    <span class=\"macro\">array!</span>[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>].to_shape(((<span class=\"number\">2</span>, <span class=\"number\">3</span>), Order::ColumnMajor)).unwrap()\n    == <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">3.</span>, <span class=\"number\">5.</span>],\n              [<span class=\"number\">2.</span>, <span class=\"number\">4.</span>, <span class=\"number\">6.</span>]]\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_shape\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1881-1900\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.into_shape\" class=\"fn\">into_shape</a>&lt;E&gt;(self, shape: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, E::<a class=\"associatedtype\" href=\"ndarray/trait.IntoDimension.html#associatedtype.Dim\" title=\"type ndarray::IntoDimension::Dim\">Dim</a>&gt;, <a class=\"struct\" href=\"ndarray/struct.ShapeError.html\" title=\"struct ndarray::ShapeError\">ShapeError</a>&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"ndarray/trait.IntoDimension.html\" title=\"trait ndarray::IntoDimension\">IntoDimension</a>,</div></h4></section></summary><div class=\"docblock\"><p>Transform the array into <code>shape</code>; any shape with the same number of\nelements is accepted, but the source array or view must be in standard\nor column-major (Fortran) layout.</p>\n<p><strong>Errors</strong> if the shapes don’t have the same number of elements.<br>\n<strong>Errors</strong> if the input array is not c- or f-contiguous.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{aview1, aview2};\n\n<span class=\"macro\">assert!</span>(\n    aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>]).into_shape((<span class=\"number\">2</span>, <span class=\"number\">2</span>)).unwrap()\n    == aview2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n                [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reshape\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1922-1947\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.reshape\" class=\"fn\">reshape</a>&lt;E&gt;(&amp;self, shape: E) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, E::<a class=\"associatedtype\" href=\"ndarray/trait.IntoDimension.html#associatedtype.Dim\" title=\"type ndarray::IntoDimension::Dim\">Dim</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataShared.html\" title=\"trait ndarray::DataShared\">DataShared</a> + <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.IntoDimension.html\" title=\"trait ndarray::IntoDimension\">IntoDimension</a>,</div></h4></section></summary><div class=\"docblock\"><p><em>Note: Reshape is for <code>ArcArray</code> only. Use <code>.into_shape()</code> for\nother arrays and array views.</em></p>\n<p>Transform the array into <code>shape</code>; any shape with the same number of\nelements is accepted.</p>\n<p>May clone all elements if needed to arrange elements in standard\nlayout (and break sharing).</p>\n<p><strong>Panics</strong> if shapes are incompatible.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{rcarr1, rcarr2};\n\n<span class=\"macro\">assert!</span>(\n    rcarr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>]).reshape((<span class=\"number\">2</span>, <span class=\"number\">2</span>))\n    == rcarr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n                [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_dyn\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1958-1964\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.into_dyn\" class=\"fn\">into_dyn</a>(self) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.IxDyn.html\" title=\"type ndarray::IxDyn\">IxDyn</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Convert any array or array view to a dynamic dimensional array or\narray view (respectively).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{arr2, ArrayD};\n\n<span class=\"kw\">let </span>array: ArrayD&lt;i32&gt; = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>],\n                                [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]).into_dyn();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_dimensionality\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#1982-2003\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.into_dimensionality\" class=\"fn\">into_dimensionality</a>&lt;D2&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D2&gt;, <a class=\"struct\" href=\"ndarray/struct.ShapeError.html\" title=\"struct ndarray::ShapeError\">ShapeError</a>&gt;<div class=\"where\">where\n    D2: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h4></section></summary><div class=\"docblock\"><p>Convert an array or array view to another with the same type, but different dimensionality\ntype. Errors if the dimensions don’t agree (the number of axes must match).</p>\n<p>Note that conversion to a dynamic dimensional array will never fail (and is equivalent to\nthe <code>into_dyn</code> method).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{ArrayD, Ix2, IxDyn};\n\n<span class=\"comment\">// Create a dynamic dimensionality array and convert it to an Array2\n// (Ix2 dimension type).\n\n</span><span class=\"kw\">let </span>array = ArrayD::&lt;f64&gt;::zeros(IxDyn(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">10</span>]));\n\n<span class=\"macro\">assert!</span>(array.into_dimensionality::&lt;Ix2&gt;().is_ok());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.broadcast\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2034-2097\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.broadcast\" class=\"fn\">broadcast</a>&lt;E&gt;(&amp;self, dim: E) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'_, A, E::<a class=\"associatedtype\" href=\"ndarray/trait.IntoDimension.html#associatedtype.Dim\" title=\"type ndarray::IntoDimension::Dim\">Dim</a>&gt;&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"ndarray/trait.IntoDimension.html\" title=\"trait ndarray::IntoDimension\">IntoDimension</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Act like a larger size and/or shape array by <em>broadcasting</em>\ninto a larger shape, if possible.</p>\n<p>Return <code>None</code> if shapes can not be broadcast together.</p>\n<p><em><strong>Background</strong></em></p>\n<ul>\n<li>Two axes are compatible if they are equal, or one of them is 1.</li>\n<li>In this instance, only the axes of the smaller side (self) can be 1.</li>\n</ul>\n<p>Compare axes beginning with the <em>last</em> axis of each shape.</p>\n<p>For example (1, 2, 4) can be broadcast into (7, 6, 2, 4)\nbecause its axes are either equal or 1 (or missing);\nwhile (2, 2) can <em>not</em> be broadcast into (2, 4).</p>\n<p>The implementation creates a view with strides set to zero for the\naxes that are to be repeated.</p>\n<p>The broadcasting documentation for Numpy has more information.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{aview1, aview2};\n\n<span class=\"macro\">assert!</span>(\n    aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1.</span>, <span class=\"number\">0.</span>]).broadcast((<span class=\"number\">10</span>, <span class=\"number\">2</span>)).unwrap()\n    == aview2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">0.</span>]; <span class=\"number\">10</span>])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_axes\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2146-2149\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.swap_axes\" class=\"fn\">swap_axes</a>(&amp;mut self, ax: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>, bx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Swap axes <code>ax</code> and <code>bx</code>.</p>\n<p>This does not move any data, it just adjusts the array’s dimensions\nand strides.</p>\n<p><strong>Panics</strong> if the axes are out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>]]);\na.swap_axes(<span class=\"number\">0</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(\n    a == arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>], [<span class=\"number\">2.</span>], [<span class=\"number\">3.</span>]])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.permuted_axes\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2173-2201\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.permuted_axes\" class=\"fn\">permuted_axes</a>&lt;T&gt;(self, axes: T) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"ndarray/trait.IntoDimension.html\" title=\"trait ndarray::IntoDimension\">IntoDimension</a>&lt;Dim = D&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Permute the axes.</p>\n<p>This does not move any data, it just adjusts the array’s dimensions\nand strides.</p>\n<p><em>i</em> in the <em>j</em>-th place in the axes sequence means <code>self</code>’s <em>i</em>-th axis\nbecomes <code>self.permuted_axes()</code>’s <em>j</em>-th axis</p>\n<p><strong>Panics</strong> if any of the axes are out of bounds, if an axis is missing,\nor if an axis is repeated more than once.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{arr2, Array3};\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]);\n<span class=\"macro\">assert_eq!</span>(a.view().permuted_axes([<span class=\"number\">1</span>, <span class=\"number\">0</span>]), a.t());\n\n<span class=\"kw\">let </span>b = Array3::&lt;u8&gt;::zeros((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(b.permuted_axes([<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>]).shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reversed_axes\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2207-2211\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.reversed_axes\" class=\"fn\">reversed_axes</a>(self) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class=\"docblock\"><p>Transpose the array by reversing axes.</p>\n<p>Transposition reverses the order of the axes (dimensions and strides)\nwhile retaining the same data.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.t\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2218-2223\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.t\" class=\"fn\">t</a>(&amp;self) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView.html\" title=\"type ndarray::ArrayView\">ArrayView</a>&lt;'_, A, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a transposed view of the array.</p>\n<p>This is a shorthand for <code>self.view().reversed_axes()</code>.</p>\n<p>See also the more general methods <code>.reversed_axes()</code> and <code>.swap_axes()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.axes\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2226-2228\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.axes\" class=\"fn\">axes</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/iter/struct.Axes.html\" title=\"struct ndarray::iter::Axes\">Axes</a>&lt;'_, D&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Axes&lt;&#39;_, D&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return an iterator over the length and stride of each axis.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_stride_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2239-2241\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.max_stride_axis\" class=\"fn\">max_stride_axis</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a></h4></section></summary><div class=\"docblock\"><p>Return the axis with the greatest stride (by absolute value),\npreferring axes with len &gt; 1.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.invert_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2246-2255\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.invert_axis\" class=\"fn\">invert_axis</a>(&amp;mut self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>)</h4></section></summary><div class=\"docblock\"><p>Reverse the stride of <code>axis</code>.</p>\n<p><em><strong>Panics</strong></em> if the axis is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge_axes\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2292-2294\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.merge_axes\" class=\"fn\">merge_axes</a>(&amp;mut self, take: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, into: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>If possible, merge in the axis <code>take</code> to <code>into</code>.</p>\n<p>Returns <code>true</code> iff the axes are now merged.</p>\n<p>This method merges the axes if movement along the two original axes\n(moving fastest along the <code>into</code> axis) can be equivalently represented\nas movement along one (merged) axis. Merging the axes preserves this\norder in the merged axis. If <code>take</code> and <code>into</code> are the same axis, then\nthe axis is “merged” if its length is ≤ 1.</p>\n<p>If the return value is <code>true</code>, then the following hold:</p>\n<ul>\n<li>\n<p>The new length of the <code>into</code> axis is the product of the original\nlengths of the two axes.</p>\n</li>\n<li>\n<p>The new length of the <code>take</code> axis is 0 if the product of the original\nlengths of the two axes is 0, and 1 otherwise.</p>\n</li>\n</ul>\n<p>If the return value is <code>false</code>, then merging is not possible, and the\noriginal shape and strides have been preserved.</p>\n<p>Note that the ordering constraint means that if it’s possible to merge\n<code>take</code> into <code>into</code>, it’s usually not possible to merge <code>into</code> into\n<code>take</code>, and vice versa.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array3;\n<span class=\"kw\">use </span>ndarray::Axis;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = Array3::&lt;f64&gt;::zeros((<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));\n<span class=\"macro\">assert!</span>(a.merge_axes(Axis(<span class=\"number\">1</span>), Axis(<span class=\"number\">2</span>)));\n<span class=\"macro\">assert_eq!</span>(a.shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">12</span>]);</code></pre></div>\n<p><em><strong>Panics</strong></em> if an axis is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2317-2325\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.insert_axis\" class=\"fn\">insert_axis</a>(self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Larger\" title=\"type ndarray::Dimension::Larger\">Larger</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Insert new array axis at <code>axis</code> and return the result.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Array3, Axis, arr1, arr2};\n\n<span class=\"comment\">// Convert a 1-D array into a row vector (2-D).\n</span><span class=\"kw\">let </span>a = arr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>row = a.insert_axis(Axis(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(row, arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]]));\n\n<span class=\"comment\">// Convert a 1-D array into a column vector (2-D).\n</span><span class=\"kw\">let </span>b = arr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>col = b.insert_axis(Axis(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(col, arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1</span>], [<span class=\"number\">2</span>], [<span class=\"number\">3</span>]]));\n\n<span class=\"comment\">// The new axis always has length 1.\n</span><span class=\"kw\">let </span>b = Array3::&lt;f64&gt;::zeros((<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(b.insert_axis(Axis(<span class=\"number\">2</span>)).shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>]);</code></pre></div>\n<p><em><strong>Panics</strong></em> if the axis is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2333-2338\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.remove_axis\" class=\"fn\">remove_axis</a>(self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Remove array axis <code>axis</code> and return the result.</p>\n<p>This is equivalent to <code>.index_axis_move(axis, 0)</code> and makes most sense to use if the\naxis to remove is of length 1.</p>\n<p><strong>Panics</strong> if the axis is out of bounds or its length is zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.assign\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2349-2356\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.assign\" class=\"fn\">assign</a>&lt;E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>, S2&gt;(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Perform an elementwise assigment to <code>self</code> from <code>rhs</code>.</p>\n<p>If their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.assign_to\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2364-2373\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.assign_to\" class=\"fn\">assign_to</a>&lt;P&gt;(&amp;self, to: P)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    P: <a class=\"trait\" href=\"ndarray/trait.IntoNdProducer.html\" title=\"trait ndarray::IntoNdProducer\">IntoNdProducer</a>&lt;Dim = D&gt;,\n    P::<a class=\"associatedtype\" href=\"ndarray/trait.IntoNdProducer.html#associatedtype.Item\" title=\"type ndarray::IntoNdProducer::Item\">Item</a>: <a class=\"trait\" href=\"ndarray/trait.AssignElem.html\" title=\"trait ndarray::AssignElem\">AssignElem</a>&lt;A&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Perform an elementwise assigment of values cloned from <code>self</code> into array or producer <code>to</code>.</p>\n<p>The destination <code>to</code> can be another array or a producer of assignable elements.\n<a href=\"ndarray/trait.AssignElem.html\" title=\"trait ndarray::AssignElem\"><code>AssignElem</code></a> determines how elements are assigned.</p>\n<p><strong>Panics</strong> if shapes disagree.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fill\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2376-2382\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.fill\" class=\"fn\">fill</a>(&amp;mut self, x: A)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Perform an elementwise assigment to <code>self</code> from element <code>x</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zip_mut_with\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2443-2459\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.zip_mut_with\" class=\"fn\">zip_mut_with</a>&lt;B, S2, E, F&gt;(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;, f: F)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut A</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;B</a>),</div></h4></section></summary><div class=\"docblock\"><p>Traverse two arrays in unspecified order, in lock step,\ncalling the closure <code>f</code> on each element pair.</p>\n<p>If their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2465-2478\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.fold\" class=\"fn\">fold</a>&lt;'a, F, B&gt;(&amp;'a self, init: B, f: F) -&gt; B<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(B, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a A</a>) -&gt; B,\n    A: 'a,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Traverse the array elements and apply a fold,\nreturning the resulting value.</p>\n<p>Elements are visited in arbitrary order.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2498-2513\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.map\" class=\"fn\">map</a>&lt;'a, B, F&gt;(&amp;'a self, f: F) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;B, D&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a A</a>) -&gt; B,\n    A: 'a,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Call <code>f</code> by reference on each element and create a new array\nwith the new values.</p>\n<p>Elements are visited in arbitrary order.</p>\n<p>Return an array with the same shape as <code>self</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[ <span class=\"number\">0.</span>, <span class=\"number\">1.</span>],\n               [-<span class=\"number\">1.</span>, <span class=\"number\">2.</span>]]);\n<span class=\"macro\">assert!</span>(\n    a.map(|x| <span class=\"kw-2\">*</span>x &gt;= <span class=\"number\">1.0</span>)\n    == arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>],\n              [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2521-2536\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.map_mut\" class=\"fn\">map_mut</a>&lt;'a, B, F&gt;(&amp;'a mut self, f: F) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;B, D&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a mut A</a>) -&gt; B,\n    A: 'a,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Call <code>f</code> on a mutable reference of each element and create a new array\nwith the new values.</p>\n<p>Elements are visited in arbitrary order.</p>\n<p>Return an array with the same shape as <code>self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mapv\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2555-2562\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.mapv\" class=\"fn\">mapv</a>&lt;B, F&gt;(&amp;self, f: F) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;B, D&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(A) -&gt; B,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Call <code>f</code> by <strong>v</strong>alue on each element and create a new array\nwith the new values.</p>\n<p>Elements are visited in arbitrary order.</p>\n<p>Return an array with the same shape as <code>self</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[ <span class=\"number\">0.</span>, <span class=\"number\">1.</span>],\n               [-<span class=\"number\">1.</span>, <span class=\"number\">2.</span>]]);\n<span class=\"macro\">assert!</span>(\n    a.mapv(f32::abs) == arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">0.</span>, <span class=\"number\">1.</span>],\n                               [<span class=\"number\">1.</span>, <span class=\"number\">2.</span>]])\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mapv_into\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2568-2576\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.mapv_into\" class=\"fn\">mapv_into</a>&lt;F&gt;(self, f: F) -&gt; Self<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(A) -&gt; A,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Call <code>f</code> by <strong>v</strong>alue on each element, update the array with the new values\nand return it.</p>\n<p>Elements are visited in arbitrary order.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mapv_into_any\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2592-2618\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.mapv_into_any\" class=\"fn\">mapv_into_any</a>&lt;B, F&gt;(self, f: F) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;B, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(A) -&gt; B,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + 'static,\n    B: 'static,</div></h4></section></summary><div class=\"docblock\"><p>Consume the array, call <code>f</code> by <strong>v</strong>alue on each element, and return an\nowned array with the new values. Works for <strong>any</strong> <code>F: FnMut(A)-&gt;B</code>.</p>\n<p>If <code>A</code> and <code>B</code> are the same type then the map is performed by delegating\nto <a href=\"ndarray/struct.ArrayBase.html#method.mapv_into\" title=\"method ndarray::ArrayBase::mapv_into\"><code>mapv_into</code></a> and then converting into an owned array. This avoids\nunnecessary memory allocations in <a href=\"ndarray/struct.ArrayBase.html#method.mapv\" title=\"method ndarray::ArrayBase::mapv\"><code>mapv</code></a>.</p>\n<p>If <code>A</code> and <code>B</code> are different types then a new array is allocated and the\nmap is performed as in <a href=\"ndarray/struct.ArrayBase.html#method.mapv\" title=\"method ndarray::ArrayBase::mapv\"><code>mapv</code></a>.</p>\n<p>Elements are visited in arbitrary order.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_inplace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2623-2637\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.map_inplace\" class=\"fn\">map_inplace</a>&lt;'a, F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    A: 'a,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a mut A</a>),</div></h4></section></summary><div class=\"docblock\"><p>Modify the array in place by calling <code>f</code> by mutable reference on each element.</p>\n<p>Elements are visited in arbitrary order.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mapv_inplace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2660-2667\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.mapv_inplace\" class=\"fn\">mapv_inplace</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(A) -&gt; A,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Modify the array in place by calling <code>f</code> by <strong>v</strong>alue on each element.\nThe array is updated with the new values.</p>\n<p>Elements are visited in arbitrary order.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>approx::assert_abs_diff_eq;\n<span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[ <span class=\"number\">0.</span>, <span class=\"number\">1.</span>],\n                   [-<span class=\"number\">1.</span>, <span class=\"number\">2.</span>]]);\na.mapv_inplace(f32::exp);\n<span class=\"macro\">assert_abs_diff_eq!</span>(\n    a,\n    arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.00000</span>, <span class=\"number\">2.71828</span>],\n           [<span class=\"number\">0.36788</span>, <span class=\"number\">7.38906</span>]]),\n    epsilon = <span class=\"number\">1e-5</span>,\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2672-2679\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.for_each\" class=\"fn\">for_each</a>&lt;'a, F&gt;(&amp;'a self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a A</a>),\n    A: 'a,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Call <code>f</code> for each element in the array.</p>\n<p>Elements are visited in arbitrary order.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.visit\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2686-2693\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.visit\" class=\"fn\">visit</a>&lt;'a, F&gt;(&amp;'a self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;'a A</a>),\n    A: 'a,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Renamed to .for_each()</span></div></span></summary><div class=\"docblock\"><p>Visit each element in the array by calling <code>f</code> by reference\non each element.</p>\n<p>Elements are visited in arbitrary order.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fold_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2703-2715\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.fold_axis\" class=\"fn\">fold_axis</a>&lt;B, F&gt;(\n    &amp;self,\n    axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>,\n    init: B,\n    fold: F,\n) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;B, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;B</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;A</a>) -&gt; B,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Fold along an axis.</p>\n<p>Combine the elements of each subview with the previous using the <code>fold</code>\nfunction and initial value <code>init</code>.</p>\n<p>Return the result as an <code>Array</code>.</p>\n<p><strong>Panics</strong> if <code>axis</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2725-2744\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.map_axis\" class=\"fn\">map_axis</a>&lt;'a, B, F&gt;(\n    &amp;'a self,\n    axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>,\n    mapping: F,\n) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;B, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"type\" href=\"ndarray/type.ArrayView1.html\" title=\"type ndarray::ArrayView1\">ArrayView1</a>&lt;'a, A&gt;) -&gt; B,\n    A: 'a,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Reduce the values along an axis into just one value, producing a new\narray with one less dimension.</p>\n<p>Elements are visited in arbitrary order.</p>\n<p>Return the result as an <code>Array</code>.</p>\n<p><strong>Panics</strong> if <code>axis</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_axis_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2756-2779\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.map_axis_mut\" class=\"fn\">map_axis_mut</a>&lt;'a, B, F&gt;(\n    &amp;'a mut self,\n    axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>,\n    mapping: F,\n) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;B, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"type\" href=\"ndarray/type.ArrayViewMut1.html\" title=\"type ndarray::ArrayViewMut1\">ArrayViewMut1</a>&lt;'a, A&gt;) -&gt; B,\n    A: 'a,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Reduce the values along an axis into just one value, producing a new\narray with one less dimension.\n1-dimensional lanes are passed as mutable references to the reducer,\nallowing for side-effects.</p>\n<p>Elements are visited in arbitrary order.</p>\n<p>Return the result as an <code>Array</code>.</p>\n<p><strong>Panics</strong> if <code>axis</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_index\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2792-2803\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.remove_index\" class=\"fn\">remove_index</a>(&amp;mut self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a> + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Remove the <code>index</code>th elements along <code>axis</code> and shift down elements from higher indexes.</p>\n<p>Note that this “removes” the elements by swapping them around to the end of the axis and\nshortening the length of the axis; the elements are not deinitialized or dropped by this,\njust moved out of view (this only matters for elements with ownership semantics). It’s\nsimilar to slicing an owned array in place.</p>\n<p>Decreases the length of <code>axis</code> by one.</p>\n<p><em><strong>Panics</strong></em> if <code>axis</code> is out of bounds<br>\n<em><strong>Panics</strong></em> if not <code>index &lt; self.len_of(axis)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.accumulate_axis_inplace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_methods.rs.html#2833-2859\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.accumulate_axis_inplace\" class=\"fn\">accumulate_axis_inplace</a>&lt;F&gt;(&amp;mut self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;A</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut A</a>),\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Iterates over pairs of consecutive elements along the axis.</p>\n<p>The first argument to the closure is an element, and the second\nargument is the next element along the axis. Iteration is guaranteed to\nproceed in order along the specified axis, but in all other respects\nthe iteration order is unspecified.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<p>For example, this can be used to compute the cumulative sum along an\naxis:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{array, Axis};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>arr = <span class=\"macro\">array!</span>[\n    [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]],\n    [[<span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">9</span>, <span class=\"number\">10</span>], [<span class=\"number\">11</span>, <span class=\"number\">12</span>]],\n];\narr.accumulate_axis_inplace(Axis(<span class=\"number\">1</span>), |<span class=\"kw-2\">&amp;</span>prev, curr| <span class=\"kw-2\">*</span>curr += prev);\n<span class=\"macro\">assert_eq!</span>(\n    arr,\n    <span class=\"macro\">array!</span>[\n        [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">4</span>, <span class=\"number\">6</span>], [<span class=\"number\">9</span>, <span class=\"number\">12</span>]],\n        [[<span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">16</span>, <span class=\"number\">18</span>], [<span class=\"number\">27</span>, <span class=\"number\">30</span>]],\n    ],\n);</code></pre></div>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_special_element_types.rs.html#18-43\">source</a><a href=\"#impl-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.RawDataSubst.html\" title=\"trait ndarray::RawDataSubst\">RawDataSubst</a>&lt;A, Elem = <a class=\"union\" href=\"https://doc.rust-lang.org/1.81.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;A&gt;&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Methods specific to arrays with <code>MaybeUninit</code> elements.</p>\n<p><em><strong>See also all methods for <a href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\"><code>ArrayBase</code></a></strong></em></p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.assume_init\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_special_element_types.rs.html#35-42\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.assume_init\" class=\"fn\">assume_init</a>(self) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;&lt;S as <a class=\"trait\" href=\"ndarray/trait.RawDataSubst.html\" title=\"trait ndarray::RawDataSubst\">RawDataSubst</a>&lt;A&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.RawDataSubst.html#associatedtype.Output\" title=\"type ndarray::RawDataSubst::Output\">Output</a>, D&gt;</h4></section></summary><div class=\"docblock\"><p><strong>Promise</strong> that the array’s elements are all fully initialized, and convert\nthe array from element type <code>MaybeUninit&lt;A&gt;</code> to <code>A</code>.</p>\n<p>For example, it can convert an <code>Array&lt;MaybeUninit&lt;f64&gt;, D&gt;</code> to <code>Array&lt;f64, D&gt;</code>.</p>\n<h6 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h6>\n<p>Safe to use if all the array’s elements have been initialized.</p>\n<p>Note that for owned and shared ownership arrays, the promise must include all of the\narray’s storage; it is for example possible to slice these in place, but that must\nonly be done after all elements have been initialized.</p>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#343-364\">source</a><a href=\"#impl-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.scaled_add\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#355-363\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.scaled_add\" class=\"fn\">scaled_add</a>&lt;S2, E&gt;(&amp;mut self, alpha: A, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    A: <a class=\"trait\" href=\"ndarray/trait.LinalgScalar.html\" title=\"trait ndarray::LinalgScalar\">LinalgScalar</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h4></section></summary><div class=\"docblock\"><p>Perform the operation <code>self += alpha * rhs</code> efficiently, where\n<code>alpha</code> is a scalar and <code>rhs</code> is another array. This operation is\nalso known as <code>axpy</code> in BLAS.</p>\n<p>If their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#18-414\">source</a><a href=\"#impl-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><h4 id=\"numerical-methods-for-arrays\"><a class=\"doc-anchor\" href=\"#numerical-methods-for-arrays\">§</a>Numerical Methods for Arrays</h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#32-48\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.sum\" class=\"fn\">sum</a>(&amp;self) -&gt; A<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = A&gt; + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return the sum of all elements in the array.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n               [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]]);\n<span class=\"macro\">assert_eq!</span>(a.sum(), <span class=\"number\">10.</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scalar_sum\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#54-59\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.scalar_sum\" class=\"fn\">scalar_sum</a>(&amp;self) -&gt; A<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = A&gt; + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: renamed to <code>sum</code></span></div></span></summary><div class=\"docblock\"><p>Return the sum of all elements in the array.</p>\n<p><em>This method has been renamed to <code>.sum()</code></em></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mean\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#74-86\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.mean\" class=\"fn\">mean</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = A&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;Output = A&gt; + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"https://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> x̅ of all elements in the array:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>    1   n\nx̅ = ―   ∑ xᵢ\n    n  i=1\n</code></pre></div>\n<p>If the array is empty, <code>None</code> is returned.</p>\n<p><strong>Panics</strong> if <code>A::from_usize()</code> fails to convert the number of elements in the array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#97-113\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.product\" class=\"fn\">product</a>(&amp;self) -&gt; A<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;Output = A&gt; + <a class=\"trait\" href=\"num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return the product of all elements in the array.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n               [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]]);\n<span class=\"macro\">assert_eq!</span>(a.product(), <span class=\"number\">24.</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.var\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#155-178\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.var\" class=\"fn\">var</a>(&amp;self, ddof: A) -&gt; A<div class=\"where\">where\n    A: <a class=\"trait\" href=\"num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a> + <a class=\"trait\" href=\"num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return variance of elements in the array.</p>\n<p>The variance is computed using the <a href=\"https://www.jstor.org/stable/1266577\">Welford one-pass\nalgorithm</a>.</p>\n<p>The parameter <code>ddof</code> specifies the “delta degrees of freedom”. For\nexample, to calculate the population variance, use <code>ddof = 0</code>, or to\ncalculate the sample variance, use <code>ddof = 1</code>.</p>\n<p>The variance is defined as:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>              1       n\nvariance = ――――――――   ∑ (xᵢ - x̅)²\n           n - ddof  i=1\n</code></pre></div>\n<p>where</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>    1   n\nx̅ = ―   ∑ xᵢ\n    n  i=1\n</code></pre></div>\n<p>and <code>n</code> is the length of the array.</p>\n<p><strong>Panics</strong> if <code>ddof</code> is less than zero or greater than <code>n</code></p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>approx::assert_abs_diff_eq;\n\n<span class=\"kw\">let </span>a = <span class=\"macro\">array!</span>[<span class=\"number\">1.</span>, -<span class=\"number\">4.32</span>, <span class=\"number\">1.14</span>, <span class=\"number\">0.32</span>];\n<span class=\"kw\">let </span>var = a.var(<span class=\"number\">1.</span>);\n<span class=\"macro\">assert_abs_diff_eq!</span>(var, <span class=\"number\">6.7331</span>, epsilon = <span class=\"number\">1e-4</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.std\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#220-225\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.std\" class=\"fn\">std</a>(&amp;self, ddof: A) -&gt; A<div class=\"where\">where\n    A: <a class=\"trait\" href=\"num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a> + <a class=\"trait\" href=\"num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return standard deviation of elements in the array.</p>\n<p>The standard deviation is computed from the variance using\nthe <a href=\"https://www.jstor.org/stable/1266577\">Welford one-pass algorithm</a>.</p>\n<p>The parameter <code>ddof</code> specifies the “delta degrees of freedom”. For\nexample, to calculate the population standard deviation, use <code>ddof = 0</code>,\nor to calculate the sample standard deviation, use <code>ddof = 1</code>.</p>\n<p>The standard deviation is defined as:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>              ⎛    1       n          ⎞\nstddev = sqrt ⎜ ――――――――   ∑ (xᵢ - x̅)²⎟\n              ⎝ n - ddof  i=1         ⎠\n</code></pre></div>\n<p>where</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>    1   n\nx̅ = ―   ∑ xᵢ\n    n  i=1\n</code></pre></div>\n<p>and <code>n</code> is the length of the array.</p>\n<p><strong>Panics</strong> if <code>ddof</code> is less than zero or greater than <code>n</code></p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">use </span>approx::assert_abs_diff_eq;\n\n<span class=\"kw\">let </span>a = <span class=\"macro\">array!</span>[<span class=\"number\">1.</span>, -<span class=\"number\">4.32</span>, <span class=\"number\">1.14</span>, <span class=\"number\">0.32</span>];\n<span class=\"kw\">let </span>stddev = a.std(<span class=\"number\">1.</span>);\n<span class=\"macro\">assert_abs_diff_eq!</span>(stddev, <span class=\"number\">2.59483</span>, epsilon = <span class=\"number\">1e-4</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#243-258\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.sum_axis\" class=\"fn\">sum_axis</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return sum along <code>axis</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{aview0, aview1, arr2, Axis};\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>],\n               [<span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>]]);\n<span class=\"macro\">assert!</span>(\n    a.sum_axis(Axis(<span class=\"number\">0</span>)) == aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">5.</span>, <span class=\"number\">7.</span>, <span class=\"number\">9.</span>]) &amp;&amp;\n    a.sum_axis(Axis(<span class=\"number\">1</span>)) == aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">6.</span>, <span class=\"number\">15.</span>]) &amp;&amp;\n\n    a.sum_axis(Axis(<span class=\"number\">0</span>)).sum_axis(Axis(<span class=\"number\">0</span>)) == aview0(<span class=\"kw-2\">&amp;</span><span class=\"number\">21.</span>)\n);</code></pre></div>\n<p><strong>Panics</strong> if <code>axis</code> is out of bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mean_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#279-293\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.mean_axis\" class=\"fn\">mean_axis</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;Output = A&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;Output = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return mean along <code>axis</code>.</p>\n<p>Return <code>None</code> if the length of the axis is zero.</p>\n<p><strong>Panics</strong> if <code>axis</code> is out of bounds or if <code>A::from_usize()</code>\nfails for the axis length.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{aview0, aview1, arr2, Axis};\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>],\n               [<span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>]]);\n<span class=\"macro\">assert!</span>(\n    a.mean_axis(Axis(<span class=\"number\">0</span>)).unwrap() == aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2.5</span>, <span class=\"number\">3.5</span>, <span class=\"number\">4.5</span>]) &amp;&amp;\n    a.mean_axis(Axis(<span class=\"number\">1</span>)).unwrap() == aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2.</span>, <span class=\"number\">5.</span>]) &amp;&amp;\n\n    a.mean_axis(Axis(<span class=\"number\">0</span>)).unwrap().mean_axis(Axis(<span class=\"number\">0</span>)).unwrap() == aview0(<span class=\"kw-2\">&amp;</span><span class=\"number\">3.5</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.var_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#338-362\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.var_axis\" class=\"fn\">var_axis</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, ddof: A) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a> + <a class=\"trait\" href=\"num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return variance along <code>axis</code>.</p>\n<p>The variance is computed using the <a href=\"https://www.jstor.org/stable/1266577\">Welford one-pass\nalgorithm</a>.</p>\n<p>The parameter <code>ddof</code> specifies the “delta degrees of freedom”. For\nexample, to calculate the population variance, use <code>ddof = 0</code>, or to\ncalculate the sample variance, use <code>ddof = 1</code>.</p>\n<p>The variance is defined as:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>              1       n\nvariance = ――――――――   ∑ (xᵢ - x̅)²\n           n - ddof  i=1\n</code></pre></div>\n<p>where</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>    1   n\nx̅ = ―   ∑ xᵢ\n    n  i=1\n</code></pre></div>\n<p>and <code>n</code> is the length of the axis.</p>\n<p><strong>Panics</strong> if <code>ddof</code> is less than zero or greater than <code>n</code>, if <code>axis</code>\nis out of bounds, or if <code>A::from_usize()</code> fails for any any of the\nnumbers in the range <code>0..=n</code>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{aview1, arr2, Axis};\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n               [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>],\n               [<span class=\"number\">5.</span>, <span class=\"number\">6.</span>]]);\n<span class=\"kw\">let </span>var = a.var_axis(Axis(<span class=\"number\">0</span>), <span class=\"number\">1.</span>);\n<span class=\"macro\">assert_eq!</span>(var, aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">4.</span>, <span class=\"number\">4.</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.std_axis\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/numeric/impl_numeric.rs.html#407-413\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.std_axis\" class=\"fn\">std_axis</a>(&amp;self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, ddof: A) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, D::<a class=\"associatedtype\" href=\"ndarray/trait.Dimension.html#associatedtype.Smaller\" title=\"type ndarray::Dimension::Smaller\">Smaller</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a> + <a class=\"trait\" href=\"num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.RemoveAxis.html\" title=\"trait ndarray::RemoveAxis\">RemoveAxis</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return standard deviation along <code>axis</code>.</p>\n<p>The standard deviation is computed from the variance using\nthe <a href=\"https://www.jstor.org/stable/1266577\">Welford one-pass algorithm</a>.</p>\n<p>The parameter <code>ddof</code> specifies the “delta degrees of freedom”. For\nexample, to calculate the population standard deviation, use <code>ddof = 0</code>,\nor to calculate the sample standard deviation, use <code>ddof = 1</code>.</p>\n<p>The standard deviation is defined as:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>              ⎛    1       n          ⎞\nstddev = sqrt ⎜ ――――――――   ∑ (xᵢ - x̅)²⎟\n              ⎝ n - ddof  i=1         ⎠\n</code></pre></div>\n<p>where</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>    1   n\nx̅ = ―   ∑ xᵢ\n    n  i=1\n</code></pre></div>\n<p>and <code>n</code> is the length of the axis.</p>\n<p><strong>Panics</strong> if <code>ddof</code> is less than zero or greater than <code>n</code>, if <code>axis</code>\nis out of bounds, or if <code>A::from_usize()</code> fails for any any of the\nnumbers in the range <code>0..=n</code>.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{aview1, arr2, Axis};\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n               [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>],\n               [<span class=\"number\">5.</span>, <span class=\"number\">6.</span>]]);\n<span class=\"kw\">let </span>stddev = a.std_axis(Axis(<span class=\"number\">0</span>), <span class=\"number\">1.</span>);\n<span class=\"macro\">assert_eq!</span>(stddev, aview1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2.</span>, <span class=\"number\">2.</span>]));</code></pre></div>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_1d.rs.html#17-64\">source</a><a href=\"#impl-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.RawData.html\" title=\"trait ndarray::RawData\">RawData</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><h4 id=\"methods-for-1-d-arrays\"><a class=\"doc-anchor\" href=\"#methods-for-1-d-arrays\">§</a>Methods For 1-D Arrays</h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_1d.rs.html#22-32\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.to_vec\" class=\"fn\">to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an vector with the elements of the one-dimensional array.</p>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#45-189\">source</a><a href=\"#impl-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, A&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><h4 id=\"constructor-methods-for-owned-arrays\"><a class=\"doc-anchor\" href=\"#constructor-methods-for-owned-arrays\">§</a>Constructor Methods for Owned Arrays</h4>\n<p>Note that the constructor methods apply to <code>Array</code> and <code>ArcArray</code>,\nthe two array types that have owned storage.</p>\n<h5 id=\"constructor-methods-for-one-dimensional-arrays\"><a class=\"doc-anchor\" href=\"#constructor-methods-for-one-dimensional-arrays\">§</a>Constructor methods for one-dimensional arrays.</h5></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#58-66\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.from_vec\" class=\"fn\">from_vec</a>(v: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional array from a vector (no copying needed).</p>\n<p><strong>Panics</strong> if the length is greater than <code>isize::MAX</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array;\n\n<span class=\"kw\">let </span>array = Array::from_vec(<span class=\"macro\">vec!</span>[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#78-80\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = A&gt;&gt;(iterable: I) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional array from an iterator or iterable.</p>\n<p><strong>Panics</strong> if the length is greater than <code>isize::MAX</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array;\n\n<span class=\"kw\">let </span>array = Array::from_iter(<span class=\"number\">0</span>..<span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.linspace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#100-105\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.linspace\" class=\"fn\">linspace</a>(start: A, end: A, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional array with <code>n</code> evenly spaced elements from\n<code>start</code> to <code>end</code> (inclusive). <code>A</code> must be a floating point type.</p>\n<p>Note that if <code>start &gt; end</code>, the first element will still be <code>start</code>,\nand the following elements will be decreasing. This is different from\nthe behavior of <code>std::ops::RangeInclusive</code>, which interprets <code>start &gt; end</code> to mean that the range is empty.</p>\n<p><strong>Panics</strong> if <code>n</code> is greater than <code>isize::MAX</code> or if converting <code>n - 1</code>\nto type <code>A</code> fails.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Array, arr1};\n\n<span class=\"kw\">let </span>array = Array::linspace(<span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">5</span>);\n<span class=\"macro\">assert!</span>(array == arr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0.0</span>, <span class=\"number\">0.25</span>, <span class=\"number\">0.5</span>, <span class=\"number\">0.75</span>, <span class=\"number\">1.0</span>]))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.range\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#119-124\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.range\" class=\"fn\">range</a>(start: A, end: A, step: A) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional array with elements from <code>start</code> to <code>end</code>\n(exclusive), incrementing by <code>step</code>. <code>A</code> must be a floating point type.</p>\n<p><strong>Panics</strong> if the length is greater than <code>isize::MAX</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Array, arr1};\n\n<span class=\"kw\">let </span>array = Array::range(<span class=\"number\">0.</span>, <span class=\"number\">5.</span>, <span class=\"number\">1.</span>);\n<span class=\"macro\">assert!</span>(array == arr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0.</span>, <span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>]))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.logspace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#148-153\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.logspace\" class=\"fn\">logspace</a>(base: A, start: A, end: A, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional array with <code>n</code> logarithmically spaced\nelements, with the starting value being <code>base.powf(start)</code> and the\nfinal one being <code>base.powf(end)</code>. <code>A</code> must be a floating point type.</p>\n<p>If <code>base</code> is negative, all values will be negative.</p>\n<p><strong>Panics</strong> if <code>n</code> is greater than <code>isize::MAX</code> or if converting <code>n - 1</code>\nto type <code>A</code> fails.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>approx::assert_abs_diff_eq;\n<span class=\"kw\">use </span>ndarray::{Array, arr1};\n\n<span class=\"kw\">let </span>array = Array::logspace(<span class=\"number\">10.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_abs_diff_eq!</span>(array, arr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1e0</span>, <span class=\"number\">1e1</span>, <span class=\"number\">1e2</span>, <span class=\"number\">1e3</span>]));\n\n<span class=\"kw\">let </span>array = Array::logspace(-<span class=\"number\">10.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_abs_diff_eq!</span>(array, arr1(<span class=\"kw-2\">&amp;</span>[-<span class=\"number\">1e3</span>, -<span class=\"number\">1e2</span>, -<span class=\"number\">1e1</span>, -<span class=\"number\">1e0</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.geomspace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#183-188\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.geomspace\" class=\"fn\">geomspace</a>(start: A, end: A, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.81.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"num_traits/float/trait.Float.html\" title=\"trait num_traits::float::Float\">Float</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional array with <code>n</code> geometrically spaced elements\nfrom <code>start</code> to <code>end</code> (inclusive). <code>A</code> must be a floating point type.</p>\n<p>Returns <code>None</code> if <code>start</code> and <code>end</code> have different signs or if either\none is zero. Conceptually, this means that in order to obtain a <code>Some</code>\nresult, <code>end / start</code> must be positive.</p>\n<p><strong>Panics</strong> if <code>n</code> is greater than <code>isize::MAX</code> or if converting <code>n - 1</code>\nto type <code>A</code> fails.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>approx::assert_abs_diff_eq;\n<span class=\"kw\">use </span>ndarray::{Array, arr1};\n\n<span class=\"kw\">let </span>array = Array::geomspace(<span class=\"number\">1e0</span>, <span class=\"number\">1e3</span>, <span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_abs_diff_eq!</span>(array, arr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1e0</span>, <span class=\"number\">1e1</span>, <span class=\"number\">1e2</span>, <span class=\"number\">1e3</span>]), epsilon = <span class=\"number\">1e-12</span>);\n\n<span class=\"kw\">let </span>array = Array::geomspace(-<span class=\"number\">1e3</span>, -<span class=\"number\">1e0</span>, <span class=\"number\">4</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_abs_diff_eq!</span>(array, arr1(<span class=\"kw-2\">&amp;</span>[-<span class=\"number\">1e3</span>, -<span class=\"number\">1e2</span>, -<span class=\"number\">1e1</span>, -<span class=\"number\">1e0</span>]), epsilon = <span class=\"number\">1e-12</span>);</code></pre></div>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#46-140\">source</a><a href=\"#impl-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dot\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#67-72\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.dot\" class=\"fn\">dot</a>&lt;Rhs&gt;(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; &lt;Self as <a class=\"trait\" href=\"ndarray/linalg/trait.Dot.html\" title=\"trait ndarray::linalg::Dot\">Dot</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\" title=\"type ndarray::linalg::Dot::Output\">Output</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"ndarray/linalg/trait.Dot.html\" title=\"trait ndarray::linalg::Dot\">Dot</a>&lt;Rhs&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Perform dot product or matrix multiplication of arrays <code>self</code> and <code>rhs</code>.</p>\n<p><code>Rhs</code> may be either a one-dimensional or a two-dimensional array.</p>\n<p>If <code>Rhs</code> is one-dimensional, then the operation is a vector dot\nproduct, which is the sum of the elementwise products (no conjugation\nof complex operands, and thus not their inner product). In this case,\n<code>self</code> and <code>rhs</code> must be the same length.</p>\n<p>If <code>Rhs</code> is two-dimensional, then the operation is matrix\nmultiplication, where <code>self</code> is treated as a row vector. In this case,\nif <code>self</code> is shape <em>M</em>, then <code>rhs</code> is shape <em>M</em> × <em>N</em> and the result is\nshape <em>N</em>.</p>\n<p><strong>Panics</strong> if the array shapes are incompatible.<br>\n<em>Note:</em> If enabled, uses blas <code>dot</code> for elements of <code>f32, f64</code> when memory\nlayout allows.</p>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_2d.rs.html#13-144\">source</a><a href=\"#impl-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix2.html\" title=\"type ndarray::Ix2\">Ix2</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.RawData.html\" title=\"trait ndarray::RawData\">RawData</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><h4 id=\"methods-for-2-d-arrays\"><a class=\"doc-anchor\" href=\"#methods-for-2-d-arrays\">§</a>Methods For 2-D Arrays</h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.row\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_2d.rs.html#26-31\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.row\" class=\"fn\">row</a>(&amp;self, index: <a class=\"type\" href=\"ndarray/type.Ix.html\" title=\"type ndarray::Ix\">Ix</a>) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView1.html\" title=\"type ndarray::ArrayView1\">ArrayView1</a>&lt;'_, A&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an array view of row <code>index</code>.</p>\n<p><strong>Panics</strong> if <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">let </span>array = <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]];\n<span class=\"macro\">assert_eq!</span>(array.row(<span class=\"number\">0</span>), <span class=\"macro\">array!</span>[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.row_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_2d.rs.html#43-48\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.row_mut\" class=\"fn\">row_mut</a>(&amp;mut self, index: <a class=\"type\" href=\"ndarray/type.Ix.html\" title=\"type ndarray::Ix\">Ix</a>) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayViewMut1.html\" title=\"type ndarray::ArrayViewMut1\">ArrayViewMut1</a>&lt;'_, A&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable array view of row <code>index</code>.</p>\n<p><strong>Panics</strong> if <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]];\narray.row_mut(<span class=\"number\">0</span>)[<span class=\"number\">1</span>] = <span class=\"number\">5.</span>;\n<span class=\"macro\">assert_eq!</span>(array, <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">5.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nrows\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_2d.rs.html#67-69\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.nrows\" class=\"fn\">nrows</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of rows (length of <code>Axis(0)</code>) in the two-dimensional array.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{array, Axis};\n\n<span class=\"kw\">let </span>array = <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n                   [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>],\n                   [<span class=\"number\">5.</span>, <span class=\"number\">6.</span>]];\n<span class=\"macro\">assert_eq!</span>(array.nrows(), <span class=\"number\">3</span>);\n\n<span class=\"comment\">// equivalent ways of getting the dimensions\n// get nrows, ncols by using dim:\n</span><span class=\"kw\">let </span>(m, n) = array.dim();\n<span class=\"macro\">assert_eq!</span>(m, array.nrows());\n<span class=\"comment\">// get length of any particular axis with .len_of()\n</span><span class=\"macro\">assert_eq!</span>(m, array.len_of(Axis(<span class=\"number\">0</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.column\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_2d.rs.html#80-85\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.column\" class=\"fn\">column</a>(&amp;self, index: <a class=\"type\" href=\"ndarray/type.Ix.html\" title=\"type ndarray::Ix\">Ix</a>) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayView1.html\" title=\"type ndarray::ArrayView1\">ArrayView1</a>&lt;'_, A&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return an array view of column <code>index</code>.</p>\n<p><strong>Panics</strong> if <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">let </span>array = <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]];\n<span class=\"macro\">assert_eq!</span>(array.column(<span class=\"number\">0</span>), <span class=\"macro\">array!</span>[<span class=\"number\">1.</span>, <span class=\"number\">3.</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.column_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_2d.rs.html#97-102\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.column_mut\" class=\"fn\">column_mut</a>(&amp;mut self, index: <a class=\"type\" href=\"ndarray/type.Ix.html\" title=\"type ndarray::Ix\">Ix</a>) -&gt; <a class=\"type\" href=\"ndarray/type.ArrayViewMut1.html\" title=\"type ndarray::ArrayViewMut1\">ArrayViewMut1</a>&lt;'_, A&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h4></section></summary><div class=\"docblock\"><p>Return a mutable array view of column <code>index</code>.</p>\n<p><strong>Panics</strong> if <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]];\narray.column_mut(<span class=\"number\">0</span>)[<span class=\"number\">1</span>] = <span class=\"number\">5.</span>;\n<span class=\"macro\">assert_eq!</span>(array, <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">5.</span>, <span class=\"number\">4.</span>]]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ncols\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_2d.rs.html#121-123\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.ncols\" class=\"fn\">ncols</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of columns (length of <code>Axis(1)</code>) in the two-dimensional array.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{array, Axis};\n\n<span class=\"kw\">let </span>array = <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n                   [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>],\n                   [<span class=\"number\">5.</span>, <span class=\"number\">6.</span>]];\n<span class=\"macro\">assert_eq!</span>(array.ncols(), <span class=\"number\">2</span>);\n\n<span class=\"comment\">// equivalent ways of getting the dimensions\n// get nrows, ncols by using dim:\n</span><span class=\"kw\">let </span>(m, n) = array.dim();\n<span class=\"macro\">assert_eq!</span>(n, array.ncols());\n<span class=\"comment\">// get length of any particular axis with .len_of()\n</span><span class=\"macro\">assert_eq!</span>(n, array.len_of(Axis(<span class=\"number\">1</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_square\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_2d.rs.html#140-143\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.is_square\" class=\"fn\">is_square</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Return true if the array is square, false otherwise.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Square:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">let </span>array = <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>]];\n<span class=\"macro\">assert!</span>(array.is_square());</code></pre></div>\n<p>Not square:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::array;\n<span class=\"kw\">let </span>array = <span class=\"macro\">array!</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">5.</span>], [<span class=\"number\">3.</span>, <span class=\"number\">4.</span>, <span class=\"number\">6.</span>]];\n<span class=\"macro\">assert!</span>(!array.is_square());</code></pre></div>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#192-256\">source</a><a href=\"#impl-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, A&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix2.html\" title=\"type ndarray::Ix2\">Ix2</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><h5 id=\"constructor-methods-for-two-dimensional-arrays\"><a class=\"doc-anchor\" href=\"#constructor-methods-for-two-dimensional-arrays\">§</a>Constructor methods for two-dimensional arrays.</h5></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eye\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#199-209\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.eye\" class=\"fn\">eye</a>(n: <a class=\"type\" href=\"ndarray/type.Ix.html\" title=\"type ndarray::Ix\">Ix</a>) -&gt; Self<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> + <a class=\"trait\" href=\"num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create an identity matrix of size <code>n</code> (square 2D array).</p>\n<p><strong>Panics</strong> if <code>n * n</code> would overflow <code>isize</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_diag\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#222-232\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.from_diag\" class=\"fn\">from_diag</a>&lt;S2&gt;(diag: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a 2D matrix from its diagonal</p>\n<p><strong>Panics</strong> if <code>diag.len() * diag.len()</code> would overflow <code>isize</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Array2, arr1, arr2};\n\n<span class=\"kw\">let </span>diag = arr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"kw\">let </span>array = Array2::from_diag(<span class=\"kw-2\">&amp;</span>diag);\n<span class=\"macro\">assert_eq!</span>(array, arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1</span>, <span class=\"number\">0</span>], [<span class=\"number\">0</span>, <span class=\"number\">2</span>]]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_diag_elem\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_constructors.rs.html#245-255\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.from_diag_elem\" class=\"fn\">from_diag_elem</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>, elem: A) -&gt; Self<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a>,</div></h4></section></summary><div class=\"docblock\"><p>Create a square 2D matrix of the specified size, with the specified\nelement along the diagonal and zeros elsewhere.</p>\n<p><strong>Panics</strong> if <code>n * n</code> would overflow <code>isize</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{array, Array2};\n\n<span class=\"kw\">let </span>array = Array2::from_diag_elem(<span class=\"number\">2</span>, <span class=\"number\">5.</span>);\n<span class=\"macro\">assert_eq!</span>(array, <span class=\"macro\">array!</span>[[<span class=\"number\">5.</span>, <span class=\"number\">0.</span>], [<span class=\"number\">0.</span>, <span class=\"number\">5.</span>]]);</code></pre></div>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#220-259\">source</a><a href=\"#impl-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix2.html\" title=\"type ndarray::Ix2\">Ix2</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dot\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#253-258\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.dot\" class=\"fn\">dot</a>&lt;Rhs&gt;(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; &lt;Self as <a class=\"trait\" href=\"ndarray/linalg/trait.Dot.html\" title=\"trait ndarray::linalg::Dot\">Dot</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\" title=\"type ndarray::linalg::Dot::Output\">Output</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"ndarray/linalg/trait.Dot.html\" title=\"trait ndarray::linalg::Dot\">Dot</a>&lt;Rhs&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Perform matrix multiplication of rectangular arrays <code>self</code> and <code>rhs</code>.</p>\n<p><code>Rhs</code> may be either a one-dimensional or a two-dimensional array.</p>\n<p>If Rhs is two-dimensional, they array shapes must agree in the way that\nif <code>self</code> is <em>M</em> × <em>N</em>, then <code>rhs</code> is <em>N</em> × <em>K</em>.</p>\n<p>Return a result array with shape <em>M</em> × <em>K</em>.</p>\n<p><strong>Panics</strong> if shapes are incompatible or the number of elements in the\nresult would overflow <code>isize</code>.</p>\n<p><em>Note:</em> If enabled, uses blas <code>gemv/gemm</code> for elements of <code>f32, f64</code>\nwhen memory layout allows. The default matrixmultiply backend\nis otherwise used for <code>f32, f64</code> for all memory layouts.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::arr2;\n\n<span class=\"kw\">let </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n               [<span class=\"number\">0.</span>, <span class=\"number\">1.</span>]]);\n<span class=\"kw\">let </span>b = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>],\n               [<span class=\"number\">2.</span>, <span class=\"number\">3.</span>]]);\n\n<span class=\"macro\">assert!</span>(\n    a.dot(<span class=\"kw-2\">&amp;</span>b) == arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">5.</span>, <span class=\"number\">8.</span>],\n                        [<span class=\"number\">2.</span>, <span class=\"number\">3.</span>]])\n);</code></pre></div>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrayBase%3CS,+Dim%3CIxDynImpl%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_dyn.rs.html#13-58\">source</a><a href=\"#impl-ArrayBase%3CS,+Dim%3CIxDynImpl%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.IxDyn.html\" title=\"type ndarray::IxDyn\">IxDyn</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><h4 id=\"methods-for-dynamic-dimensional-arrays\"><a class=\"doc-anchor\" href=\"#methods-for-dynamic-dimensional-arrays\">§</a>Methods for Dynamic-Dimensional Arrays</h4></div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_axis_inplace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_dyn.rs.html#32-36\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.insert_axis_inplace\" class=\"fn\">insert_axis_inplace</a>(&amp;mut self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>)</h4></section></summary><div class=\"docblock\"><p>Insert new array axis of length 1 at <code>axis</code>, modifying the shape and\nstrides in-place.</p>\n<p><strong>Panics</strong> if the axis is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Axis, arr2, arr3};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]]).into_dyn();\n<span class=\"macro\">assert_eq!</span>(a.shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\na.insert_axis_inplace(Axis(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(a, arr3(<span class=\"kw-2\">&amp;</span>[[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]], [[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]]]).into_dyn());\n<span class=\"macro\">assert_eq!</span>(a.shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_axis_inplace\" class=\"method\"><a class=\"src rightside\" href=\"src/ndarray/impl_dyn.rs.html#53-57\">source</a><h4 class=\"code-header\">pub fn <a href=\"ndarray/struct.ArrayBase.html#tymethod.index_axis_inplace\" class=\"fn\">index_axis_inplace</a>(&amp;mut self, axis: <a class=\"struct\" href=\"ndarray/struct.Axis.html\" title=\"struct ndarray::Axis\">Axis</a>, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Collapses the array to <code>index</code> along the axis and removes the axis,\nmodifying the shape and strides in-place.</p>\n<p><strong>Panics</strong> if <code>axis</code> or <code>index</code> is out of bounds.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Axis, arr1, arr2};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = arr2(<span class=\"kw-2\">&amp;</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]]).into_dyn();\n<span class=\"macro\">assert_eq!</span>(a.shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\na.index_axis_inplace(Axis(<span class=\"number\">1</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a, arr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">5</span>]).into_dyn());\n<span class=\"macro\">assert_eq!</span>(a.shape(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>]);</code></pre></div>\n</div></details></div></details>",0,"ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#275-283\">source</a><a href=\"#impl-Binary-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a>, S, D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Format the array using <code>Binary</code> and apply the formatting parameters used\nto each element.</p>\n<p>The array is shown in multiline style.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#279-282\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Binary.html#tymethod.fmt\">Read more</a></div></details></div></details>","Binary","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#311\">source</a><a href=\"#impl-BitAnd%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nbit and\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#311\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#311\">source</a><a href=\"#impl-BitAnd%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nbit and\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#311\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#311\">source</a><a href=\"#impl-BitAnd%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nbit and\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#311\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#499-503\">source</a><a href=\"#impl-BitAndAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self &amp;= rhs</code> as elementwise bit and (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#499-503\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#499-503\">source</a><a href=\"#impl-BitAndAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self &amp;= rhs</code> as elementwise bit and (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#499-503\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#312\">source</a><a href=\"#impl-BitOr%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nbit or\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#312\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#312\">source</a><a href=\"#impl-BitOr%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nbit or\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#312\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#312\">source</a><a href=\"#impl-BitOr%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nbit or\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#312\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#504-508\">source</a><a href=\"#impl-BitOrAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self |= rhs</code> as elementwise bit or (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#504-508\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#504-508\">source</a><a href=\"#impl-BitOrAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self |= rhs</code> as elementwise bit or (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#504-508\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#313\">source</a><a href=\"#impl-BitXor%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nbit xor\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#313\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#313\">source</a><a href=\"#impl-BitXor%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nbit xor\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#313\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#313\">source</a><a href=\"#impl-BitXor%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nbit xor\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#313\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#509-513\">source</a><a href=\"#impl-BitXorAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self ^= rhs</code> as elementwise bit xor (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#509-513\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#509-513\">source</a><a href=\"#impl-BitXorAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self ^= rhs</code> as elementwise bit xor (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#509-513\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_clone.rs.html#12-36\">source</a><a href=\"#impl-Clone-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"ndarray/trait.RawDataClone.html\" title=\"trait ndarray::RawDataClone\">RawDataClone</a>, D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_clone.rs.html#29-35\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\"><p><code>Array</code> implements <code>.clone_from()</code> to reuse an array’s existing\nallocation. Semantically equivalent to <code>*self = other.clone()</code>, but\npotentially more efficient.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_clone.rs.html#13-24\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details>","Clone","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#206-228\">source</a><a href=\"#impl-Debug-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, S, D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Format the array using <code>Debug</code> and apply the formatting parameters used\nto each element.</p>\n<p>The array is shown in multiline style.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#210-227\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#424-435\">source</a><a href=\"#impl-Default-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"docblock\"><p>Create an owned array with a default state.</p>\n<p>The array is created with dimension <code>D::default()</code>, which results\nin for example dimensions <code>0</code> and <code>(0, 0)</code> with zero elements for the\none-dimensional and two-dimensional cases respectively.</p>\n<p>The default dimension for <code>IxDyn</code> is <code>IxDyn(&amp;[0])</code> (array has zero\nelements). And the default for the dimension <code>()</code> is <code>()</code> (array has\none element).</p>\n<p>Since arrays cannot grow, the intention is to use the default value as\nplaceholder.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#432-434\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.81.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#192-200\">source</a><a href=\"#impl-Display-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>, S, D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Format the array using <code>Display</code> and apply the formatting parameters used\nto each element.</p>\n<p>The array is shown in multiline style.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#196-199\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#309\">source</a><a href=\"#impl-Div%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\ndivision\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#309\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#309\">source</a><a href=\"#impl-Div%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\ndivision\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#309\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#309\">source</a><a href=\"#impl-Div%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\ndivision\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#309\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#489-493\">source</a><a href=\"#impl-DivAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self /= rhs</code> as elementwise division (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#489-493\">source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#489-493\">source</a><a href=\"#impl-DivAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self /= rhs</code> as elementwise division (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#489-493\">source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Dot%3CArrayBase%3CS2,+Dim%3C%5Busize;+1%5D%3E%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#177-196\">source</a><a href=\"#impl-Dot%3CArrayBase%3CS2,+Dim%3C%5Busize;+1%5D%3E%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, S2&gt; <a class=\"trait\" href=\"ndarray/linalg/trait.Dot.html\" title=\"trait ndarray::linalg::Dot\">Dot</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, <a class=\"struct\" href=\"ndarray/struct.Dim.html\" title=\"struct ndarray::Dim\">Dim</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">1</a>]&gt;&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    A: <a class=\"trait\" href=\"ndarray/trait.LinalgScalar.html\" title=\"trait ndarray::LinalgScalar\">LinalgScalar</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dot\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#193-195\">source</a><a href=\"#method.dot\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ndarray/linalg/trait.Dot.html#tymethod.dot\" class=\"fn\">dot</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;) -&gt; A</h4></section></summary><div class=\"docblock\"><p>Compute the dot product of one-dimensional arrays.</p>\n<p>The dot product is a sum of the elementwise products (no conjugation\nof complex operands, and thus not their inner product).</p>\n<p><strong>Panics</strong> if the arrays are not of the same length.<br>\n<em>Note:</em> If enabled, uses blas <code>dot</code> for elements of <code>f32, f64</code> when memory\nlayout allows.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = A</h4></section></summary><div class='docblock'>The result of the operation. <a href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\">Read more</a></div></details></div></details>","Dot<ArrayBase<S2, Dim<[usize; 1]>>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Dot%3CArrayBase%3CS2,+Dim%3C%5Busize;+1%5D%3E%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#321-341\">source</a><a href=\"#impl-Dot%3CArrayBase%3CS2,+Dim%3C%5Busize;+1%5D%3E%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, S2&gt; <a class=\"trait\" href=\"ndarray/linalg/trait.Dot.html\" title=\"trait ndarray::linalg::Dot\">Dot</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, <a class=\"struct\" href=\"ndarray/struct.Dim.html\" title=\"struct ndarray::Dim\">Dim</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">1</a>]&gt;&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix2.html\" title=\"type ndarray::Ix2\">Ix2</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    A: <a class=\"trait\" href=\"ndarray/trait.LinalgScalar.html\" title=\"trait ndarray::LinalgScalar\">LinalgScalar</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform the matrix multiplication of the rectangular array <code>self</code> and\ncolumn vector <code>rhs</code>.</p>\n<p>The array shapes must agree in the way that\nif <code>self</code> is <em>M</em> × <em>N</em>, then <code>rhs</code> is <em>N</em>.</p>\n<p>Return a result array with shape <em>M</em>.</p>\n<p><strong>Panics</strong> if shapes are incompatible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"ndarray/struct.OwnedRepr.html\" title=\"struct ndarray::OwnedRepr\">OwnedRepr</a>&lt;A&gt;, <a class=\"struct\" href=\"ndarray/struct.Dim.html\" title=\"struct ndarray::Dim\">Dim</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">1</a>]&gt;&gt;</h4></section></summary><div class='docblock'>The result of the operation. <a href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\">Read more</a></div></details><section id=\"method.dot\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#328-340\">source</a><a href=\"#method.dot\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ndarray/linalg/trait.Dot.html#tymethod.dot\" class=\"fn\">dot</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;</h4></section></div></details>","Dot<ArrayBase<S2, Dim<[usize; 1]>>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Dot%3CArrayBase%3CS2,+Dim%3C%5Busize;+2%5D%3E%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#198-218\">source</a><a href=\"#impl-Dot%3CArrayBase%3CS2,+Dim%3C%5Busize;+2%5D%3E%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, S2&gt; <a class=\"trait\" href=\"ndarray/linalg/trait.Dot.html\" title=\"trait ndarray::linalg::Dot\">Dot</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, <a class=\"struct\" href=\"ndarray/struct.Dim.html\" title=\"struct ndarray::Dim\">Dim</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]&gt;&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    A: <a class=\"trait\" href=\"ndarray/trait.LinalgScalar.html\" title=\"trait ndarray::LinalgScalar\">LinalgScalar</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dot\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#215-217\">source</a><a href=\"#method.dot\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ndarray/linalg/trait.Dot.html#tymethod.dot\" class=\"fn\">dot</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, <a class=\"type\" href=\"ndarray/type.Ix2.html\" title=\"type ndarray::Ix2\">Ix2</a>&gt;) -&gt; <a class=\"type\" href=\"ndarray/type.Array.html\" title=\"type ndarray::Array\">Array</a>&lt;A, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Perform the matrix multiplication of the row vector <code>self</code> and\nrectangular matrix <code>rhs</code>.</p>\n<p>The array shapes must agree in the way that\nif <code>self</code> is <em>M</em>, then <code>rhs</code> is <em>M</em> × <em>N</em>.</p>\n<p>Return a result array with shape <em>N</em>.</p>\n<p><strong>Panics</strong> if shapes are incompatible.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"ndarray/struct.OwnedRepr.html\" title=\"struct ndarray::OwnedRepr\">OwnedRepr</a>&lt;A&gt;, <a class=\"struct\" href=\"ndarray/struct.Dim.html\" title=\"struct ndarray::Dim\">Dim</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">1</a>]&gt;&gt;</h4></section></summary><div class='docblock'>The result of the operation. <a href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\">Read more</a></div></details></div></details>","Dot<ArrayBase<S2, Dim<[usize; 2]>>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Dot%3CArrayBase%3CS2,+Dim%3C%5Busize;+2%5D%3E%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#261-289\">source</a><a href=\"#impl-Dot%3CArrayBase%3CS2,+Dim%3C%5Busize;+2%5D%3E%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+2%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, S2&gt; <a class=\"trait\" href=\"ndarray/linalg/trait.Dot.html\" title=\"trait ndarray::linalg::Dot\">Dot</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, <a class=\"struct\" href=\"ndarray/struct.Dim.html\" title=\"struct ndarray::Dim\">Dim</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]&gt;&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix2.html\" title=\"type ndarray::Ix2\">Ix2</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    A: <a class=\"trait\" href=\"ndarray/trait.LinalgScalar.html\" title=\"trait ndarray::LinalgScalar\">LinalgScalar</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"ndarray/struct.OwnedRepr.html\" title=\"struct ndarray::OwnedRepr\">OwnedRepr</a>&lt;A&gt;, <a class=\"struct\" href=\"ndarray/struct.Dim.html\" title=\"struct ndarray::Dim\">Dim</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.array.html\">2</a>]&gt;&gt;</h4></section></summary><div class='docblock'>The result of the operation. <a href=\"ndarray/linalg/trait.Dot.html#associatedtype.Output\">Read more</a></div></details><section id=\"method.dot\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/linalg/impl_linalg.rs.html#268-288\">source</a><a href=\"#method.dot\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"ndarray/linalg/trait.Dot.html#tymethod.dot\" class=\"fn\">dot</a>(&amp;self, b: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, <a class=\"type\" href=\"ndarray/type.Ix2.html\" title=\"type ndarray::Ix2\">Ix2</a>&gt;) -&gt; <a class=\"type\" href=\"ndarray/type.Array2.html\" title=\"type ndarray::Array2\">Array2</a>&lt;A&gt;</h4></section></div></details>","Dot<ArrayBase<S2, Dim<[usize; 2]>>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3C%5BA%5D%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#152-162\">source</a><a href=\"#impl-From%3CBox%3C%5BA%5D%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#159-161\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(b: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[A]</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional array from a boxed slice (no copying needed).</p>\n<p><strong>Panics</strong> if the length is greater than <code>isize::MAX</code>.</p>\n</div></details></div></details>","From<Box<[A]>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CA%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#164-180\">source</a><a href=\"#impl-From%3CVec%3CA%3E%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#177-179\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;A&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional array from a vector (no copying needed).</p>\n<p><strong>Panics</strong> if the length is greater than <code>isize::MAX</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::Array;\n\n<span class=\"kw\">let </span>array = Array::from(<span class=\"macro\">vec!</span>[<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>]);</code></pre></div>\n</div></details></div></details>","From<Vec<A>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CA%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#182-203\">source</a><a href=\"#impl-FromIterator%3CA%3E-for-ArrayBase%3CS,+Dim%3C%5Busize;+1%5D%3E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#197-202\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iterable: I) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, <a class=\"type\" href=\"ndarray/type.Ix1.html\" title=\"type ndarray::Ix1\">Ix1</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = A&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Create a one-dimensional array from an iterable.</p>\n<p><strong>Panics</strong> if the length is greater than <code>isize::MAX</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>ndarray::{Array, arr1};\n\n<span class=\"comment\">// Either use `from_iter` directly or use `Iterator::collect`.\n</span><span class=\"kw\">let </span>array = Array::from_iter((<span class=\"number\">0</span>..<span class=\"number\">5</span>).map(|x| x * x));\n<span class=\"macro\">assert!</span>(array == arr1(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>]))</code></pre></div>\n</div></details></div></details>","FromIterator<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#255-278\">source</a><a href=\"#impl-Hash-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    S::<a class=\"associatedtype\" href=\"ndarray/trait.RawData.html#associatedtype.Elem\" title=\"type ndarray::RawData::Elem\">Elem</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#262-277\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.81.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CI%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#43-61\">source</a><a href=\"#impl-Index%3CI%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,</div></h3></section></summary><div class=\"docblock\"><p>Access the element at <strong>index</strong>.</p>\n<p><strong>Panics</strong> if index is out of bounds.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;S as <a class=\"trait\" href=\"ndarray/trait.RawData.html\" title=\"trait ndarray::RawData\">RawData</a>&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.RawData.html#associatedtype.Elem\" title=\"type ndarray::RawData::Elem\">Elem</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#51-60\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;S::<a class=\"associatedtype\" href=\"ndarray/trait.RawData.html#associatedtype.Elem\" title=\"type ndarray::RawData::Elem\">Elem</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<I>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CI%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#66-83\">source</a><a href=\"#impl-IndexMut%3CI%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    I: <a class=\"trait\" href=\"ndarray/trait.NdIndex.html\" title=\"trait ndarray::NdIndex\">NdIndex</a>&lt;D&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,</div></h3></section></summary><div class=\"docblock\"><p>Access the element at <strong>index</strong> mutably.</p>\n<p><strong>Panics</strong> if index is out of bounds.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#73-82\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut S::<a class=\"associatedtype\" href=\"ndarray/trait.RawData.html#associatedtype.Elem\" title=\"type ndarray::RawData::Elem\">Elem</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<I>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#234-242\">source</a><a href=\"#impl-LowerExp-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a>, S, D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Format the array using <code>LowerExp</code> and apply the formatting parameters used\nto each element.</p>\n<p>The array is shown in multiline style.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#238-241\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.LowerExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.LowerExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerExp","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#261-269\">source</a><a href=\"#impl-LowerHex-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a>, S, D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Format the array using <code>LowerHex</code> and apply the formatting parameters used\nto each element.</p>\n<p>The array is shown in multiline style.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#265-268\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerHex","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#308\">source</a><a href=\"#impl-Mul%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nmultiplication\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#308\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#308\">source</a><a href=\"#impl-Mul%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nmultiplication\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#308\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#308\">source</a><a href=\"#impl-Mul%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nmultiplication\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#308\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#484-488\">source</a><a href=\"#impl-MulAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self *= rhs</code> as elementwise multiplication (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#484-488\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#484-488\">source</a><a href=\"#impl-MulAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self *= rhs</code> as elementwise multiplication (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#484-488\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#370-384\">source</a><a href=\"#impl-Neg-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a>&lt;Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#378-383\">source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Perform an elementwise negation of <code>self</code> and return the result.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Neg","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#400-414\">source</a><a href=\"#impl-Not-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a>&lt;Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#408-413\">source</a><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Perform an elementwise unary not of <code>self</code> and return the result.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details></div></details>","Not","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26ArrayBase%3CS2,+D%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#118-128\">source</a><a href=\"#impl-PartialEq%3C%26ArrayBase%3CS2,+D%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, D&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Return <code>true</code> if the array shapes and all elements of <code>self</code> and\n<code>rhs</code> are equal. Return <code>false</code> otherwise.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#125-127\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: &amp;&amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, D&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<&'a ArrayBase<S2, D>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CArrayBase%3CS2,+D%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#87-114\">source</a><a href=\"#impl-PartialEq%3CArrayBase%3CS2,+D%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, D&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;B&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Return <code>true</code> if the array shapes and all elements of <code>self</code> and\n<code>rhs</code> are equal. Return <code>false</code> otherwise.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#94-113\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, D&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.81.0/src/core/cmp.rs.html#262\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.81.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<ArrayBase<S2, D>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#310\">source</a><a href=\"#impl-Rem%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nremainder\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#310\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#310\">source</a><a href=\"#impl-Rem%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nremainder\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#310\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#310\">source</a><a href=\"#impl-Rem%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nremainder\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#310\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#494-498\">source</a><a href=\"#impl-RemAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self %= rhs</code> as elementwise remainder (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#494-498\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#494-498\">source</a><a href=\"#impl-RemAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self %= rhs</code> as elementwise remainder (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#494-498\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#314\">source</a><a href=\"#impl-Shl%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nleft shift\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#314\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#314\">source</a><a href=\"#impl-Shl%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nleft shift\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#314\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#314\">source</a><a href=\"#impl-Shl%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nleft shift\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#314\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#514-518\">source</a><a href=\"#impl-ShlAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self &lt;&lt;= rhs</code> as elementwise left shift (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#514-518\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#514-518\">source</a><a href=\"#impl-ShlAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self &lt;&lt;= rhs</code> as elementwise left shift (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#514-518\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#315\">source</a><a href=\"#impl-Shr%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nright shift\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#315\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#315\">source</a><a href=\"#impl-Shr%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nright shift\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#315\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#315\">source</a><a href=\"#impl-Shr%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nright shift\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#315\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#519-523\">source</a><a href=\"#impl-ShrAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self &gt;&gt;= rhs</code> as elementwise right shift (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#519-523\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#519-523\">source</a><a href=\"#impl-ShrAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self &gt;&gt;= rhs</code> as elementwise right shift (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#519-523\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#307\">source</a><a href=\"#impl-Sub%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nsubtraction\nbetween <code>self</code> and reference <code>rhs</code>,\nand return the result.</p>\n<p><code>rhs</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape,\ncloning the data if needed.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#307\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#307\">source</a><a href=\"#impl-Sub%3CArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;B, Output = A&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = B&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a> + <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nsubtraction\nbetween <code>self</code> and <code>rhs</code>,\nand return the result.</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n<p>If their shapes disagree, <code>self</code> is broadcast to their broadcast shape.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, &lt;D as <a class=\"trait\" href=\"ndarray/trait.DimMax.html\" title=\"trait ndarray::DimMax\">DimMax</a>&lt;E&gt;&gt;::<a class=\"associatedtype\" href=\"ndarray/trait.DimMax.html#associatedtype.Output\" title=\"type ndarray::DimMax::Output\">Output</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#307\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#307\">source</a><a href=\"#impl-Sub%3CB%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D, B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;B&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;B, Output = A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataOwned.html\" title=\"trait ndarray::DataOwned\">DataOwned</a>&lt;Elem = A&gt; + <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    B: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform elementwise\nsubtraction\nbetween <code>self</code> and the scalar <code>x</code>,\nand return the result (based on <code>self</code>).</p>\n<p><code>self</code> must be an <code>Array</code> or <code>ArcArray</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#307\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, x: B) -&gt; <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<B>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#479-483\">source</a><a href=\"#impl-SubAssign%3C%26ArrayBase%3CS2,+E%3E%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, A, S, S2, D, E&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;&amp;'a <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    S2: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    E: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self -= rhs</code> as elementwise subtraction (in place).\nIf their shapes disagree, <code>rhs</code> is broadcast to the shape of <code>self</code>.</p>\n<p><strong>Panics</strong> if broadcasting isn’t possible.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#479-483\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: &amp;<a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S2, E&gt;)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&'a ArrayBase<S2, E>>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#479-483\">source</a><a href=\"#impl-SubAssign%3CA%3E-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;A&gt; for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"ndarray/trait.ScalarOperand.html\" title=\"trait ndarray::ScalarOperand\">ScalarOperand</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;A&gt;,\n    S: <a class=\"trait\" href=\"ndarray/trait.DataMut.html\" title=\"trait ndarray::DataMut\">DataMut</a>&lt;Elem = A&gt;,\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"docblock\"><p>Perform <code>self -= rhs</code> as elementwise subtraction (in place).</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_ops.rs.html#479-483\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: A)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.81.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<A>","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#248-256\">source</a><a href=\"#impl-UpperExp-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a>, S, D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>&lt;Elem = A&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Format the array using <code>UpperExp</code> and apply the formatting parameters used\nto each element.</p>\n<p>The array is shown in multiline style.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ndarray/arrayformat.rs.html#252-255\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.UpperExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.81.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.81.0/core/fmt/trait.UpperExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperExp","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<section id=\"impl-Copy-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/impl_clone.rs.html#38\">source</a><a href=\"#impl-Copy-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"ndarray/trait.RawDataClone.html\" title=\"trait ndarray::RawDataClone\">RawDataClone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>, D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h3></section>","Copy","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<section id=\"impl-Eq-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#144-150\">source</a><a href=\"#impl-Eq-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"ndarray/trait.Dimension.html\" title=\"trait ndarray::Dimension\">Dimension</a>,\n    S: <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    S::<a class=\"associatedtype\" href=\"ndarray/trait.RawData.html#associatedtype.Elem\" title=\"type ndarray::RawData::Elem\">Elem</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<section id=\"impl-Send-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#294-299\">source</a><a href=\"#impl-Send-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section><div class=\"docblock\"><p><code>ArrayBase</code> is <code>Send</code> when the storage type is.</p>\n</div>","Send","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"],["<section id=\"impl-Sync-for-ArrayBase%3CS,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ndarray/arraytraits.rs.html#286-291\">source</a><a href=\"#impl-Sync-for-ArrayBase%3CS,+D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"ndarray/trait.Data.html\" title=\"trait ndarray::Data\">Data</a>,\n    D: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.81.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section><div class=\"docblock\"><p><code>ArrayBase</code> is <code>Sync</code> when the storage type is.</p>\n</div>","Sync","ndarray::ArcArray","ndarray::Array","ndarray::CowArray","ndarray::ArrayView","ndarray::ArrayViewMut","ndarray::RawArrayView","ndarray::RawArrayViewMut"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()